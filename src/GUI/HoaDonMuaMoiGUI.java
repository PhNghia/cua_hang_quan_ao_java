/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BUS.HoaDonMuaMoiBUS;
import DAO.HoaDonMuaMoiDAO;
import DTO.ChiTietHDM;
import DTO.FormatValue;
import DTO.HoaDonMua;
import DTO.NhaCungCap;
import DTO.SanPham;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author BomPC
 */
public class HoaDonMuaMoiGUI extends javax.swing.JPanel {

    private final HoaDonMuaMoiBUS hdmmBUS;

    /**
     * Creates new form HoaDonMuaMoiGUI
     */
    public HoaDonMuaMoiGUI() {
        hdmmBUS = new HoaDonMuaMoiBUS(new HoaDonMuaMoiDAO());
        initComponents();
        customComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jlbTitleHD = new javax.swing.JLabel();
        jlbMaHD = new javax.swing.JLabel();
        jpnFormCTHD = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlbMaSP = new javax.swing.JLabel();
        jlbSanPham = new javax.swing.JLabel();
        jlbNcc = new javax.swing.JLabel();
        jcbNcc = new javax.swing.JComboBox<>();
        jbtnNccMoi = new javax.swing.JButton();
        jlbGiaNhap = new javax.swing.JLabel();
        jlbSLNhap = new javax.swing.JLabel();
        jspnSLNhap = new javax.swing.JSpinner();
        jbtnThem = new javax.swing.JButton();
        jbtnSua = new javax.swing.JButton();
        jbtnXoa = new javax.swing.JButton();
        jbtnHuy = new javax.swing.JButton();
        jtfMaSP = new javax.swing.JTextField();
        jtfSanPham = new javax.swing.JTextField();
        jtfGiaNhap = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jbtnXacNhan = new javax.swing.JButton();
        jbtnLamMoi = new javax.swing.JButton();
        jbtnThoat = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbDSSP = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbCTHD = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jlbTongTienHD = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(1026, 60));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jlbTitleHD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbTitleHD.setText("Tạo hóa đơn mua mới");
        jPanel1.add(jlbTitleHD, java.awt.BorderLayout.PAGE_START);

        jlbMaHD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbMaHD.setText("Mã hóa đơn: HD01");
        jlbMaHD.setToolTipText("");
        jlbMaHD.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jlbMaHD, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jpnFormCTHD.setBorder(javax.swing.BorderFactory.createTitledBorder("Hiệu chỉnh chi tiết hóa đơn mua"));
        jpnFormCTHD.setPreferredSize(new java.awt.Dimension(932, 280));
        jpnFormCTHD.setLayout(new java.awt.BorderLayout());

        jPanel6.setPreferredSize(new java.awt.Dimension(500, 200));

        jlbMaSP.setText("Mã sản phẩm");

        jlbSanPham.setText("Sản phẩm");

        jlbNcc.setText("Nhà cung cấp");

        jbtnNccMoi.setText("+");

        jlbGiaNhap.setText("Giá nhập");

        jlbSLNhap.setText("Số lượng nhập");

        jspnSLNhap.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jbtnThem.setText("Thêm vào hóa đơn");

        jbtnSua.setText("Sửa chi tiết hóa đơn");

        jbtnXoa.setText("Xóa khỏi hóa đơn");

        jbtnHuy.setText("Hủy");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbMaSP)
                            .addComponent(jlbGiaNhap)
                            .addComponent(jlbNcc))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jcbNcc, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbtnNccMoi))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtfGiaNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtfMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlbSanPham)
                                    .addComponent(jlbSLNhap))))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jspnSLNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(397, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jbtnThem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnSua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnHuy)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbMaSP)
                    .addComponent(jtfMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbSanPham)
                    .addComponent(jtfSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbNcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbNcc)
                    .addComponent(jbtnNccMoi))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbGiaNhap)
                    .addComponent(jtfGiaNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbSLNhap)
                    .addComponent(jspnSLNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnThem)
                    .addComponent(jbtnSua)
                    .addComponent(jbtnXoa)
                    .addComponent(jbtnHuy))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        jpnFormCTHD.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(1016, 32));
        java.awt.GridBagLayout jPanel7Layout = new java.awt.GridBagLayout();
        jPanel7Layout.columnWidths = new int[] {0, 20, 0, 20, 0};
        jPanel7Layout.rowHeights = new int[] {0};
        jPanel7.setLayout(jPanel7Layout);

        jbtnXacNhan.setText("Xác nhận");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel7.add(jbtnXacNhan, gridBagConstraints);

        jbtnLamMoi.setText("Làm mới");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel7.add(jbtnLamMoi, gridBagConstraints);

        jbtnThoat.setText("Thoát");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel7.add(jbtnThoat, gridBagConstraints);

        jpnFormCTHD.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        add(jpnFormCTHD, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Danh sách sản phẩm"));
        jPanel4.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jtbDSSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Sản phẩm", "Số lượng", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtbDSSP);
        if (jtbDSSP.getColumnModel().getColumnCount() > 0) {
            jtbDSSP.getColumnModel().getColumn(0).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(1).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(2).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.LINE_START);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Chi tiết hóa đơn mua"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jtbCTHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Sản phẩm", "Nhà cung cấp", "Giá nhập", "Số lượng nhập", "Tổng tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtbCTHD);
        if (jtbCTHD.getColumnModel().getColumnCount() > 0) {
            jtbCTHD.getColumnModel().getColumn(0).setResizable(false);
            jtbCTHD.getColumnModel().getColumn(1).setResizable(false);
            jtbCTHD.getColumnModel().getColumn(2).setResizable(false);
            jtbCTHD.getColumnModel().getColumn(3).setResizable(false);
            jtbCTHD.getColumnModel().getColumn(4).setResizable(false);
            jtbCTHD.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel8.setPreferredSize(new java.awt.Dimension(616, 54));

        jLabel9.setText("Tổng tiền hóa đơn:");

        jlbTongTienHD.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlbTongTienHD.setForeground(new java.awt.Color(255, 51, 51));
        jlbTongTienHD.setText("1.000.000 VNĐ");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlbTongTienHD)
                .addContainerGap(377, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jlbTongTienHD))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel8, java.awt.BorderLayout.PAGE_END);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnHuy;
    private javax.swing.JButton jbtnLamMoi;
    private javax.swing.JButton jbtnNccMoi;
    private javax.swing.JButton jbtnSua;
    private javax.swing.JButton jbtnThem;
    private javax.swing.JButton jbtnThoat;
    private javax.swing.JButton jbtnXacNhan;
    private javax.swing.JButton jbtnXoa;
    private javax.swing.JComboBox<String> jcbNcc;
    private javax.swing.JLabel jlbGiaNhap;
    private javax.swing.JLabel jlbMaHD;
    private javax.swing.JLabel jlbMaSP;
    private javax.swing.JLabel jlbNcc;
    private javax.swing.JLabel jlbSLNhap;
    private javax.swing.JLabel jlbSanPham;
    private javax.swing.JLabel jlbTitleHD;
    private javax.swing.JLabel jlbTongTienHD;
    private javax.swing.JPanel jpnFormCTHD;
    private javax.swing.JSpinner jspnSLNhap;
    private javax.swing.JTable jtbCTHD;
    private javax.swing.JTable jtbDSSP;
    private javax.swing.JTextField jtfGiaNhap;
    private javax.swing.JTextField jtfMaSP;
    private javax.swing.JTextField jtfSanPham;
    // End of variables declaration//GEN-END:variables

    public void customComponents() {
        renderHDM();
        renderDsSanPham();
        renderGUIAction();
        renderDsNcc();

        ListSelectionModel selectOfDSHD = this.jtbDSSP.getSelectionModel();
        selectOfDSHD.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int row = jtbDSSP.getSelectedRow();
                if (row < 0) {
                    renderInforSP();
                } else {
                    renderInforSP(row);
                }
            }
        });

        ListSelectionModel selectOfCTHD = this.jtbCTHD.getSelectionModel();
        selectOfCTHD.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int row = jtbCTHD.getSelectedRow();
                if (row < 0) {
                } else {
                    renderInforCTHDM(row);
                    renderGUIAction();
                }

            }
        });

        jtfMaSP.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (jtbCTHD.getSelectedRow() < 0) {
                    JTextField source = (JTextField) e.getSource();
                    String value = source.getText();
                    hdmmBUS.filteredDsSPByMa(value);
                    renderDsSanPham();
                    if (hdmmBUS.getDsSanPham().length == 1) {
                        jtbDSSP.setRowSelectionInterval(0, 0);
                    }
                }
            }
        });

        jtfSanPham.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (jtbCTHD.getSelectedRow() < 0) {
                    JTextField source = (JTextField) e.getSource();
                    String value = source.getText();
                    hdmmBUS.filteredDsSPByTen(value);
                    renderDsSanPham();
                    if (hdmmBUS.getDsSanPham().length == 1) {
                        jtbDSSP.setRowSelectionInterval(0, 0);
                    }
                }
            }
        });

        jbtnThem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleThemSPVaoCTHDM();
            }
        });

        jbtnSua.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedCTHDMIndex = jtbCTHD.getSelectedRow();
                handleSuaCTHDM(selectedCTHDMIndex);
                unselectedTableDsCTHDM();
            }
        });

        jbtnXoa.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedCTHDMIndex = jtbCTHD.getSelectedRow();
                int result = handleXoaCTHDM(selectedCTHDMIndex);
                if (result == JOptionPane.YES_OPTION) {
                    unselectedTableDsCTHDM();
                }
            }
        });

        jbtnHuy.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                unselectedTableDsCTHDM();
            }
        });

        jbtnXacNhan.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            }
        });

        jbtnLamMoi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            }
        });

        jbtnThoat.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            }
        });
    }

    public void renderHDM() {
        HoaDonMua hdm = hdmmBUS.getHDM();
        jlbMaHD.setText("Mã hóa đơn: " + hdm.getMaHD());
        jlbTongTienHD.setText(FormatValue.formatCurrency((long) hdm.getTongTien()));
    }

    public void renderDsSanPham() {
        String[][] data = hdmmBUS.getDsSanPham();
        jtbDSSP.setModel(new javax.swing.table.DefaultTableModel(
                data,
                new String[]{
                    "Mã sản phẩm", "Sản phẩm", "Số lượng", "Trạng thái", "Đang nhập"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        revalidate();
    }

    public void renderGUIAction() {
        if (jtbCTHD.getSelectedRow() < 0) {
            jtbDSSP.setEnabled(true);
            // filter when input jtfMaSP, jtfSanPham is open => handle KeyListener its
            jpnFormCTHD.setBorder(javax.swing.BorderFactory.createTitledBorder("Thêm chi tiết hóa đơn mua"));
            jbtnThem.setVisible(true);
            jbtnSua.setVisible(false);
            jbtnXoa.setVisible(false);
            jbtnHuy.setVisible(false);
        } else {
            jtbDSSP.clearSelection();
            jtbDSSP.setEnabled(false);
            // filter when input jtfMaSP, jtfSanPham is close => handle KeyListener its
            jpnFormCTHD.setBorder(javax.swing.BorderFactory.createTitledBorder("Hiệu chỉnh tiết hóa đơn mua"));
            jbtnThem.setVisible(false);
            jbtnSua.setVisible(true);
            jbtnXoa.setVisible(true);
            jbtnHuy.setVisible(true);
        }
    }

    public void renderDsCTHDM() {
        String[][] data = hdmmBUS.getDsCTHDM();
        jtbCTHD.setModel(new javax.swing.table.DefaultTableModel(
                data,
                new String[]{
                    "Mã sản phẩm", "Sản phẩm", "Nhà cung cấp", "Giá nhập", "Số lượng nhập", "Tổng tiền"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        revalidate();
    }

    public void renderDsNcc() {
        String[] data = hdmmBUS.getDsNcc();
        jcbNcc.removeAllItems();
        jcbNcc.addItem("Chọn nhà cung cấp");
        for (String item : data) {
            jcbNcc.addItem(item);
        }
    }

    public void renderInforSP() {
        if (jtfMaSP.isFocusOwner() == false) {
            jtfMaSP.setText("");
        }
        if (jtfSanPham.isFocusOwner() == false) {
            jtfSanPham.setText("");
        }
    }

    public void renderInforSP(int row) {
        SanPham selectedSP = hdmmBUS.getSelectedSP(row);
        jtfMaSP.setText(selectedSP.getMaSP());
        jtfSanPham.setText(selectedSP.getTenSP());
    }
    
    public void renderInforCTHDM (int row) {
        ChiTietHDM selectedCthdm = hdmmBUS.getSelectedCthdm(row);
        jtfMaSP.setText(selectedCthdm.getSanPham().getMaSP());
        jtfSanPham.setText(selectedCthdm.getSanPham().getTenSP());
        jcbNcc.setSelectedItem(selectedCthdm.getNcc().getTenNcc());
        jtfGiaNhap.setText(selectedCthdm.getGiaNhap() + "");
        jspnSLNhap.setValue(selectedCthdm.getSanPham().getSoLuong());
    }
    
    public void unselectedTableDsCTHDM () {
        jtbCTHD.clearSelection();
        clearFormCTHDM();
        renderGUIAction();
    }

    public void clearFormCTHDM() {
        jtfMaSP.setText("");
        jtfSanPham.setText("");
        jcbNcc.setSelectedIndex(0);
        jtfGiaNhap.setText("");
        jspnSLNhap.setValue(1);
    }
    
    public ChiTietHDM getInputDataFromForm () {
        boolean isValidInput = true;
        SanPham sp = new SanPham(jtfMaSP.getText().trim(), jtfSanPham.getText().trim(), 0, 0);
        int selectedIndexNcc = jcbNcc.getSelectedIndex(); 
        // trong dữ liệu ko có item mặc định => khi kiểm tra nhận thấy người dùng đã chọn ncc thì phải -1 index để get đúng vị trí của ncc
        String giaNhapTxt = jtfGiaNhap.getText();
        int soLuong = (int) jspnSLNhap.getValue();
        isValidInput = validateSP(sp);
        if (isValidInput == false) {
            return null;
        }
        isValidInput = validateNcc(selectedIndexNcc);
        if (isValidInput == false) {
            return null;
        }
        selectedIndexNcc--;
        isValidInput = validateGiaNhap(giaNhapTxt);
        if (isValidInput == false) {
            return null;
        }
        int giaNhap = Integer.parseInt(giaNhapTxt);
        sp.setSoLuong(soLuong);
        ChiTietHDM cthdmmoi = new ChiTietHDM(
                hdmmBUS.getHDM().getMaHD(), hdmmBUS.getSelectedNcc(selectedIndexNcc), sp,
                giaNhap, giaNhap * sp.getSoLuong()
        );
        return cthdmmoi;
    }

    public void handleThemSPVaoCTHDM() {
        ChiTietHDM cthdmmoi = getInputDataFromForm();
        if (cthdmmoi == null) {
            return;
        }
        hdmmBUS.themCTHDM(cthdmmoi);
        
        hdmmBUS.restoreDSPP();

        clearFormCTHDM();
        renderHDM();
        renderDsSanPham();
        renderDsCTHDM();
    }
    
    public void handleSuaCTHDM (int selectedCTHDMIndex) {
        ChiTietHDM cthdmmoi = getInputDataFromForm();
        if (cthdmmoi == null) {
            return;
        }
        
        hdmmBUS.suaCTHDM(selectedCTHDMIndex, cthdmmoi);
        
        renderHDM();
        renderDsCTHDM();
    }
    
    
    
    public int handleXoaCTHDM (int selectedCTHDMIndex) {
        int gotOption = JOptionPane.showConfirmDialog(
                this, 
                String.format("Xóa sản phẩm \"%s\" khỏi hóa đơn?", jtfSanPham.getText()), 
                "Thông báo xác nhận", 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.INFORMATION_MESSAGE);
        if (gotOption == JOptionPane.YES_OPTION) {
            hdmmBUS.xoaCTHDM(selectedCTHDMIndex);
            renderHDM();
            renderDsCTHDM();
        }
        return gotOption;
    }

    public boolean validateRequired(String value, String message, String title, int typeMessage) {
        if ("".equals(value.trim())) {
            JOptionPane.showMessageDialog(this, message,
                    title, typeMessage);
            return false;
        }
        return true;
    }

    public boolean validateSP(SanPham sp) {
        boolean isValid;
        isValid = validateRequired(sp.getMaSP(), "Mã sản phẩm là bắt buộc",
                "Thêm sản phẩm thất bại", JOptionPane.WARNING_MESSAGE);
        if (isValid) {
            isValid = validateRequired(sp.getTenSP(), "Sản phẩm mới cần cung cấp tên sản phẩm",
                    "Thêm sản phẩm thất bại", JOptionPane.WARNING_MESSAGE);
        }
        return isValid;
    }

    public boolean validateNcc(int selectedIndex) {
        if (selectedIndex <= 0) {
            JOptionPane.showMessageDialog(this, "Chưa chọn nhà cung cấp",
                    "Thêm sản phẩm thất bại", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }

    public boolean validateGiaNhap(String giaNhap) {
        boolean isValid;
        isValid = validateRequired(giaNhap, "Sản phẩm cần cung cấp giá nhập",
                "Thêm sản phẩm thất bại", JOptionPane.WARNING_MESSAGE);
        if (isValid) {
            isValid = Pattern.compile("^\\d{1,12}$")
                    .matcher(giaNhap)
                    .matches();
            if (isValid == false) {
                JOptionPane.showMessageDialog(this, "Giá nhập không hợp lệ",
                        "Thêm sản phẩm thất bại", JOptionPane.WARNING_MESSAGE);
            }
        }
        return isValid;
    }

}
