/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.ScrollPane;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Date;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;

import BUS.TaiKhoanBus;
import DTO.NhanVien;
import DTO.TaiKhoan;

/**
 *
 * @author BomPC
 */
public class TaiKhoanGUI extends javax.swing.JPanel {

	private TaiKhoanBus taiKhoanBus = null;
	private NhanVien nhanVien = null;

	public TaiKhoanGUI() {
		taiKhoanBus = new TaiKhoanBus();
		nhanVien = new NhanVien();
		initComponents();
		setDisable();
		setTitleAccount("Thông tin tài khoản");
		renderAccount();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jbtnThem = new javax.swing.JButton();
		jbtnSua = new javax.swing.JButton();
		jbtnXoa = new javax.swing.JButton();
		jcbNameSearch = new javax.swing.JComboBox<>();
		jtfNameSearch = new javax.swing.JTextField();
		jbtnSearch = new javax.swing.JButton();
		jlbStatusSearch = new javax.swing.JLabel();
		jcbStatusSearch = new javax.swing.JComboBox<>();
		jpnFormTK = new javax.swing.JPanel();
		jlbNhanVien = new javax.swing.JLabel();
		jcbNhanVien = new javax.swing.JComboBox<>();
		jlbTenTK = new javax.swing.JLabel();
		jtfTenTK = new javax.swing.JTextField();
		jlbMatKhau = new javax.swing.JLabel();
		jlbXacNhanMatKhau = new javax.swing.JLabel();
		jlbStatus = new javax.swing.JLabel();
		jcbStatus = new javax.swing.JComboBox<>();
		jbtnXacNhan = new javax.swing.JButton();
		jbtnLamMoi = new javax.swing.JButton();
		jbtnHuy = new javax.swing.JButton();
		jpwMatKhau = new javax.swing.JPasswordField();
		jpwXacNhanMatKhau = new javax.swing.JPasswordField();
		jPanel3 = new javax.swing.JPanel();
		// Create the model with column names
		model = new DefaultTableModel(new Object[] { "Tên tài khoản", "Nhân viên", "Ngày tạo", "Trạng thái" }, 0);
		jtbDSTK = new javax.swing.JTable();
		jScrollPane1 = new javax.swing.JScrollPane(jtbDSTK);
		comboBoxNhanVienModel = new javax.swing.DefaultComboBoxModel<>();
		comboBoxTrangThaiModel = new javax.swing.DefaultComboBoxModel<>();

		setBackground(new java.awt.Color(255, 255, 255));
		setLayout(new java.awt.BorderLayout());

		jbtnThem.setText("Tạo tài khoản");

		jbtnSua.setText("Sửa tài khoản");

		jbtnXoa.setText("Xóa tài khoản");

		jcbNameSearch.setModel(
				new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Tên tài khoản", "Nhân viên" }));

		jbtnSearch.setText("Tìm kiếm");

		jlbStatusSearch.setText("Trạng thái");

		jcbStatusSearch.setModel(
				new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Hoạt động", "Ngừng hoạt động" }));

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel1Layout.createSequentialGroup().addComponent(jbtnThem)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jbtnSua)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jbtnXoa))
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addComponent(jcbNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jtfNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jbtnSearch).addGap(70, 70, 70).addComponent(jlbStatusSearch)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jcbStatusSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(499, Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(20, 20, 20)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jbtnThem).addComponent(jbtnSua).addComponent(jbtnXoa))
						.addGap(18, 18, 18)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jcbNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jtfNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jbtnSearch).addComponent(jlbStatusSearch).addComponent(jcbStatusSearch,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(30, Short.MAX_VALUE)));

		add(jPanel1, java.awt.BorderLayout.PAGE_START);

		jpnFormTK.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin tài khoản"));
		jpnFormTK.setPreferredSize(new java.awt.Dimension(974, 200));

		jlbNhanVien.setText("Nhân viên");

		jlbTenTK.setText("Tên tài khoản");

		jlbMatKhau.setText("Mật khẩu");

		jlbXacNhanMatKhau.setText("Xác nhận mật khẩu");

		jlbStatus.setText("Trạng thái");

		jbtnXacNhan.setText("Xác nhận");

		jbtnLamMoi.setText("Làm mới");

		jbtnHuy.setText("Hủy");

		jpwMatKhau.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jpwMatKhauActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jpnFormTKLayout = new javax.swing.GroupLayout(jpnFormTK);
		jpnFormTK.setLayout(jpnFormTKLayout);
		jpnFormTKLayout.setHorizontalGroup(jpnFormTKLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpnFormTKLayout.createSequentialGroup().addContainerGap().addComponent(jlbNhanVien)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jcbNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 170,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(71, 71, 71)
						.addGroup(jpnFormTKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										jpnFormTKLayout.createSequentialGroup().addComponent(jlbXacNhanMatKhau)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										jpnFormTKLayout.createSequentialGroup().addComponent(jlbTenTK).addGap(35, 35,
												35))
								.addGroup(jpnFormTKLayout.createSequentialGroup().addComponent(jlbMatKhau)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
						.addGroup(jpnFormTKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jtfTenTK).addComponent(jpwMatKhau).addComponent(jpwXacNhanMatKhau,
										javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
						.addGap(71, 71, 71)
						.addGroup(jpnFormTKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jpnFormTKLayout.createSequentialGroup().addComponent(jlbStatus)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 119,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jpnFormTKLayout.createSequentialGroup().addComponent(jbtnXacNhan)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jbtnLamMoi)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jbtnHuy)))
						.addContainerGap(229, Short.MAX_VALUE)));
		jpnFormTKLayout.setVerticalGroup(jpnFormTKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpnFormTKLayout.createSequentialGroup().addGap(20, 20, 20)
						.addGroup(jpnFormTKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jlbNhanVien)
								.addComponent(jcbNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jlbTenTK)
								.addComponent(jtfTenTK, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jlbStatus).addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(jpnFormTKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jpwMatKhau, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jlbMatKhau))
						.addGap(18, 18, 18)
						.addGroup(jpnFormTKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jlbXacNhanMatKhau).addComponent(jbtnXacNhan).addComponent(jbtnLamMoi)
								.addComponent(jbtnHuy).addComponent(jpwXacNhanMatKhau,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(54, Short.MAX_VALUE)));

		add(jpnFormTK, java.awt.BorderLayout.PAGE_END);

		jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Danh sách tài khoản"));
		jPanel3.setLayout(new java.awt.BorderLayout());

		jScrollPane1.setViewportView(jtbDSTK);
		if (jtbDSTK.getColumnModel().getColumnCount() > 0) {
			jtbDSTK.getColumnModel().getColumn(0).setResizable(false);
			jtbDSTK.getColumnModel().getColumn(1).setResizable(false);
			jtbDSTK.getColumnModel().getColumn(2).setResizable(false);
			jtbDSTK.getColumnModel().getColumn(3).setResizable(false);
		}

		jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

		add(jPanel3, java.awt.BorderLayout.CENTER);

		// ============================= HANDLE EVENTS =============================

		// Renew
		jbtnLamMoi.addActionListener(e -> renewText());

		// delete account
		jbtnXoa.addActionListener(e -> deleteAccount());

		// Create account
		jbtnThem.addActionListener(e -> createAccountAction());

		// Modify account
		jbtnSua.addActionListener(e -> modifyAccountAction());

		// cancel button
		if (jbtnHuy.isEnabled()) {
			jbtnHuy.addActionListener(e -> {
				int response = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn hủy?");
				if (response == JOptionPane.YES_OPTION) {
					renewText();
					setDisable();
					setEnableTable();
					setTitleAccount("Thông tin tài khoản");
				}
			});
		}

		// Search as status
		jcbStatusSearch.addActionListener(e -> searchAsStatus(jcbStatusSearch.getSelectedItem().toString()));

	}// </editor-fold>//GEN-END:initComponents

	private void jpwMatKhauActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jpwMatKhauActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_jpwMatKhauActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JButton jbtnHuy;
	private javax.swing.JButton jbtnLamMoi;
	private javax.swing.JButton jbtnSearch;
	private javax.swing.JButton jbtnSua;
	private javax.swing.JButton jbtnThem;
	private javax.swing.JButton jbtnXacNhan;
	private javax.swing.JButton jbtnXoa;
	private javax.swing.DefaultComboBoxModel<String> comboBoxNhanVienModel;
	private javax.swing.DefaultComboBoxModel<String> comboBoxTrangThaiModel;
	private javax.swing.JComboBox<String> jcbNameSearch;
	private javax.swing.JComboBox<String> jcbNhanVien;
	private javax.swing.JComboBox<String> jcbStatus;
	private javax.swing.JComboBox<String> jcbStatusSearch;
	private javax.swing.JLabel jlbMatKhau;
	private javax.swing.JLabel jlbNhanVien;
	private javax.swing.JLabel jlbStatus;
	private javax.swing.JLabel jlbStatusSearch;
	private javax.swing.JLabel jlbTenTK;
	private javax.swing.JLabel jlbXacNhanMatKhau;
	private javax.swing.JPanel jpnFormTK;
	private javax.swing.JPasswordField jpwMatKhau;
	private javax.swing.JPasswordField jpwXacNhanMatKhau;
	private javax.swing.JTextField jtfNameSearch;
	private javax.swing.JTextField jtfTenTK;
	private javax.swing.JTable jtbDSTK;
	private javax.swing.table.DefaultTableModel model;
	private javax.swing.JScrollPane jScrollPane1;
	private ArrayList<Integer> employeeIds;
	private ArrayList<TaiKhoan> accountForChecking;
	// End of variables declaration//GEN-END:variables

	public void renderAccount() {
		// Clear before rendering
		setDisable();
		setEnableTable();
		renewText();
		renewTable();
		renewComboBox();
		setTitleAccount("Thông tin tài khoản");

		ArrayList<TaiKhoan> accounts = this.taiKhoanBus.getTaiKhoan();
		accountForChecking = accounts;
		for (TaiKhoan account : accounts) {
			if (account.getNguoiSoHuu().getHienThi() == 1) {
				Object[] column = new Object[model.getColumnCount()];
				column[0] = account.getTenTaiKhoan();
				column[1] = account.getNguoiSoHuu().getTenNhanVien();
				column[2] = account.getNgayTao();
				column[3] = account.getTrangThai() == 1 ? "Hoạt động" : "Ngừng hoạt động";
				this.model.addRow(column);
			}
		}

		ArrayList<NhanVien> employees = this.taiKhoanBus.getNhanVien();
		employeeIds = new ArrayList<>();
		for (NhanVien employee : employees) {
			employeeIds.add(employee.getMaNhanVien());
			comboBoxNhanVienModel.addElement(employee.getTenNhanVien());
			this.jcbNhanVien.setModel(comboBoxNhanVienModel);
		}

		comboBoxTrangThaiModel.addElement("Hoạt động");
		comboBoxTrangThaiModel.addElement("Ngừng hoạt động");
		this.jcbStatus.setModel(comboBoxTrangThaiModel);

		jtbDSTK.setModel(model);
	}

	public int checkExistedId() {
		int employeeId = -1;
		int getSelectedName = jcbNhanVien.getSelectedIndex();
		employeeId = employeeIds.get(getSelectedName);

		if (getSelectedName != -1 && employeeId != -1) {
			for (TaiKhoan account : accountForChecking) {
				if (account.getNguoiSoHuu().getMaNhanVien() == employeeId) {
					return -1;
				}
			}
		}

		return employeeId;
	}

	public void createAccount(String employeeName, String username, String password, String verifyPassword,
			String status) {
		if ((username.trim().isEmpty() || password.trim().isEmpty() || verifyPassword.trim().isEmpty())
				&& (password.trim() != null && verifyPassword.trim() != null)) {
			JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin!");
			return;
		}

		int employeeId = checkExistedId();
		NhanVien nv = new NhanVien(employeeId, employeeName);

		LocalDateTime currentDateTime = LocalDateTime.now();
		int newStatus = status.equalsIgnoreCase("Hoạt động") ? 1 : 0;
		TaiKhoan tk = new TaiKhoan(username, nv, currentDateTime, newStatus);

		if (!password.equalsIgnoreCase("") && !verifyPassword.equalsIgnoreCase("")) {
			boolean isCorrectPassword = isConfirmedPassword(password, verifyPassword);
			if (!isCorrectPassword) {
				JOptionPane.showMessageDialog(null, "Mật khẩu không đúng");
				return;
			}
			tk.setMatKhau(password);
		}

		boolean isSuccess = taiKhoanBus.add(tk);
		if (isSuccess) {
			JOptionPane.showMessageDialog(null, "Tạo tài khoản thành công");
			renderAccount();
		} else {
			JOptionPane.showMessageDialog(null, "Tạo tài khoản thất bại");
		}
	}

	public void modifyAccount() {
		int selectedAccount = jtbDSTK.getSelectedRow();

		if (selectedAccount == -1) {
			JOptionPane.showMessageDialog(null, "Vui lòng chọn tài khoản muốn sửa");
			return;
		}

		// The fields are not allowed to modify
		setEnable();
		jbtnLamMoi.setEnabled(false);
		jcbNhanVien.setEnabled(false);
		jtfTenTK.setEnabled(false);
	}

	// Create account action
	private void createAccountAction() {
		setTitleAccount("Tạo tài khoản");
		setDisableTable();
		setDisable();
		jcbNhanVien.setEnabled(true);
		jbtnHuy.setEnabled(true);

		// Remove the existing action listener
		ActionListener[] listeners = jcbNhanVien.getActionListeners();
		for (ActionListener listener : listeners) {
			jcbNhanVien.removeActionListener(listener);
		}

		// Select employee to create account
		jcbNhanVien.addActionListener(e -> {
			if (jcbNhanVien.isEnabled()) {

				if (checkExistedId() == -1) {
					JOptionPane.showMessageDialog(null, "Nhân viên đã có tài khoản");
					setDisable();
					jcbNhanVien.setEnabled(true);
					jbtnHuy.setEnabled(true);
					return;
				}

				setEnable();
				jbtnXacNhan.addActionListener(event -> {
					if (getTitleAccount().equalsIgnoreCase("Tạo tài khoản")) {
						String currentEmployee = comboBoxNhanVienModel.getSelectedItem().toString();
						String currentUserName = jtfTenTK.getText();
						@SuppressWarnings("deprecation")
						String currentPassword = jpwMatKhau.getText();
						@SuppressWarnings("deprecation")
						String currentVerifyPassword = jpwXacNhanMatKhau.getText();
						String currentStatus = comboBoxTrangThaiModel.getSelectedItem().toString();
						createAccount(currentEmployee, currentUserName, currentPassword, currentVerifyPassword,
								currentStatus);
					}
				});
			}
		});
	}

	// Modify account action
	private void modifyAccountAction() {
		setTitleAccount("Chỉnh sửa tài khoản");
		modifyAccount();

		// Remove the existing action listener
		ActionListener[] listeners = jcbNhanVien.getActionListeners();
		for (ActionListener listener : listeners) {
			jcbNhanVien.removeActionListener(listener);
		}

		if (!jtfTenTK.isEnabled()) {
			jbtnXacNhan.addActionListener(e -> {
				if (getTitleAccount().equalsIgnoreCase("Chỉnh sửa tài khoản")) {
					@SuppressWarnings("deprecation")
					String password = jpwMatKhau.getText();
					@SuppressWarnings("deprecation")
					String verifyPassword = jpwXacNhanMatKhau.getText();
					String status = jcbStatus.getSelectedItem().toString();
					updateAccount(password, verifyPassword, status);
				}
			});
		}
	}

	public void updateAccount(String password, String verifyPassword, String status) {
		int selectedAccount = jtbDSTK.getSelectedRow();

		if (selectedAccount != -1) {
			String accountName = jtbDSTK.getValueAt(selectedAccount, 0).toString();
			int newStatus = status.equalsIgnoreCase("Hoạt động") ? 1 : 0;

			if (password.equalsIgnoreCase("") && verifyPassword.equalsIgnoreCase("")) {
				taiKhoanBus.updateStatus(accountName, newStatus);
				JOptionPane.showMessageDialog(null, "Cập nhật thành công");
				renderAccount();
			} else if (!password.equalsIgnoreCase("") && !verifyPassword.equalsIgnoreCase("")) {
				boolean isPassword = isConfirmedPassword(password, verifyPassword);

				if (!isPassword) {
					JOptionPane.showMessageDialog(null, "Mật khẩu xác nhận không đúng");
				}

				taiKhoanBus.updatePassword(accountName, password);
				taiKhoanBus.updateStatus(accountName, newStatus);
				JOptionPane.showMessageDialog(null, "Cập nhật thành công");
				renderAccount();
			}
		}
	}

	public void deleteAccount() {
		setTitleAccount("Xóa tài khoản");
		int selectedAccount = jtbDSTK.getSelectedRow();

		if (selectedAccount == -1) {
			JOptionPane.showMessageDialog(null, "Vui lòng chọn tài khoản muốn xóa");
			return;
		}

		int response = JOptionPane.showConfirmDialog(null, "Bạn có chắc muốn xóa tài khoản?");
		if (response == JOptionPane.YES_OPTION) {
			String accoutName = jtbDSTK.getValueAt(selectedAccount, 0).toString();
			Boolean isSuccess = taiKhoanBus.deleteTaiKhoan(accoutName);

			if (isSuccess) {
				JOptionPane.showMessageDialog(null, "Xóa tài khoản thành công");
				renderAccount();
			} else {
				JOptionPane.showMessageDialog(null, "Xóa tài khoản thất bại");
			}
		} else {
			setTitleAccount("Thông tin tài khoản");
		}
	}

	public void searchAsStatus(String status) {

		renderAccount();

		for (int i = model.getRowCount() - 1; i >= 0; i--) {
			String getStatusColumn = model.getValueAt(i, 3).toString();
			if (!status.equalsIgnoreCase(getStatusColumn)) {
				model.removeRow(i);
			}
		}

		if (status.equalsIgnoreCase("Tất cả")) {
			renderAccount();
		}
	}

	public void renewText() {
		jtfTenTK.setText("");
		jpwMatKhau.setText("");
		jpwXacNhanMatKhau.setText("");
	}

	public void renewTable() {
		model.setRowCount(0);
	}

	public void renewComboBox() {
		comboBoxNhanVienModel.removeAllElements();
		comboBoxTrangThaiModel.removeAllElements();
	}

	public void setDisable() {
		jtfTenTK.setEnabled(false);
		jpwMatKhau.setEnabled(false);
		jpwXacNhanMatKhau.setEnabled(false);

		jbtnXacNhan.setEnabled(false);
		jbtnLamMoi.setEnabled(false);
		jbtnHuy.setEnabled(false);

		jcbStatus.setEnabled(false);
		jcbNhanVien.setEnabled(false);
	}

	public void setEnable() {
		jtfTenTK.setEnabled(true);
		jpwMatKhau.setEnabled(true);
		jpwXacNhanMatKhau.setEnabled(true);

		jbtnXacNhan.setEnabled(true);
		jbtnLamMoi.setEnabled(true);
		jbtnHuy.setEnabled(true);

		jcbStatus.setEnabled(true);
		jcbNhanVien.setEnabled(true);
	}

	public void setDisableTable() {
		jtbDSTK.clearSelection();
		jtbDSTK.setEnabled(false);
	}

	public void setEnableTable() {
		jtbDSTK.setEnabled(true);
	}

	public void setTitleAccount(String title) {
		TitledBorder titledBorder = BorderFactory.createTitledBorder(title);
		jPanel1.setBorder(titledBorder);
	}

	public String getTitleAccount() {
		Border border = jPanel1.getBorder();

		if (border instanceof TitledBorder) {
			TitledBorder titledBorder = (TitledBorder) border;
			return titledBorder.getTitle();
		} else {
			return null;
		}
	}

	public Boolean isConfirmedPassword(String password, String verifyPassword) {
		// Null check and trimming
		if (password == null || verifyPassword == null) {
			return false;
		}

		return password.trim().equals(verifyPassword.trim());
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(() -> {
			JFrame frame = new JFrame();
			TaiKhoanGUI account = new TaiKhoanGUI();

			frame.add(account);
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.pack();
			frame.setLocationRelativeTo(null);
			frame.setSize(1000, 600);
			frame.setVisible(true);

		});
	}
}
