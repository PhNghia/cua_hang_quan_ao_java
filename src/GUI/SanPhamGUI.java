/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import DTO.SanPham;
import SWING.Callback;
import SWING.Debouncer;
import BUS.SanPhamBUS;

/**
 *
 * @author BomPC
 */
public class SanPhamGUI extends javax.swing.JPanel {

        /**
         * Creates new form SanPhamView
         */
        private SanPhamBUS SanPhamBUS = null;
        private SanPham SanPham = null;
        private String[] kichCoList = null;
        private ArrayList<SanPham> checkList;
        private List<JTextField> requiredFieldList = new ArrayList<>();
        private String formStatus = "";
        private String dupFlag = "";
        private File fileSelected = null;

        public SanPhamGUI(ArrayList<String> dsHanhDongCuaChucNang) {
                SanPhamBUS = new SanPhamBUS();
                initComponents();
                editComponents();
                setTable();
                defaultStatus();
                actionEvent();

                jbtnThem.setVisible(false);
                jbtnSua.setVisible(false);
                jbtnXoa.setVisible(false);
                for (String hd : dsHanhDongCuaChucNang) {
                        if (hd.toLowerCase().contains("thêm")) {
                                jbtnThem.setVisible(true);
                        } else if (hd.toLowerCase().contains("sửa")) {
                                jbtnSua.setVisible(true);
                        } else if (hd.toLowerCase().contains("xóa")) {
                                jbtnXoa.setVisible(true);
                        }
                }
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbDSSP = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jlbMaSPCT = new javax.swing.JLabel();
        jlbChatLieuCT = new javax.swing.JLabel();
        jlbMauSacCT = new javax.swing.JLabel();
        jlbKichCoCT = new javax.swing.JLabel();
        jlbGiaBanCT = new javax.swing.JLabel();
        jlbSoLuongCT = new javax.swing.JLabel();
        jlbTrangThaiCT = new javax.swing.JLabel();
        jlbImageCT = new javax.swing.JLabel();
        jlbSanPhamCT = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jbtnThem = new javax.swing.JButton();
        jbtnSua = new javax.swing.JButton();
        jbtnXoa = new javax.swing.JButton();
        jcbNameSearchType = new javax.swing.JComboBox<>();
        jtfNameSearch = new javax.swing.JTextField();
        jlbStatusSearch = new javax.swing.JLabel();
        jcbStatusSearch = new javax.swing.JComboBox<>();
        jbtnSearch = new javax.swing.JButton();
        jbtnClearFilterForm = new javax.swing.JButton();
        jpnFormSP = new javax.swing.JPanel();
        jlbMa = new javax.swing.JLabel();
        jtfMa = new javax.swing.JTextField();
        jlbChatLieu = new javax.swing.JLabel();
        jtfChatLieu = new javax.swing.JTextField();
        jlbSoLuong = new javax.swing.JLabel();
        jtfSoLuong = new javax.swing.JTextField();
        jlbSanPham = new javax.swing.JLabel();
        jtfSanPham = new javax.swing.JTextField();
        jlbMauSac = new javax.swing.JLabel();
        jtfMauSac = new javax.swing.JTextField();
        jlbGiaBan = new javax.swing.JLabel();
        jtfGiaBan = new javax.swing.JTextField();
        jlbStatus = new javax.swing.JLabel();
        jcbStatus = new javax.swing.JComboBox<>();
        jlbHinhAnh = new javax.swing.JLabel();
        jtfHinhAnh = new javax.swing.JTextField();
        jlbKichCo = new javax.swing.JLabel();
        jcbKichCo = new javax.swing.JComboBox<>();
        jbtnXacNhan = new javax.swing.JButton();
        jbtnHuy = new javax.swing.JButton();
        jbtnLamMoi = new javax.swing.JButton();
        jRadioUrl = new javax.swing.JRadioButton();
        jRadioFile = new javax.swing.JRadioButton();
        jbtnChonFile = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlbImage = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Danh sách sản phẩm"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jtbDSSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã", "Sản phẩm", "Giá bán", "Số lượng", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtbDSSP);
        if (jtbDSSP.getColumnModel().getColumnCount() > 0) {
            jtbDSSP.getColumnModel().getColumn(0).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(1).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(2).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(3).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 427));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("CHI TIẾT SẢN PHẨM");
        jLabel2.setPreferredSize(new java.awt.Dimension(108, 24));
        jPanel3.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jPanel1.setAutoscrolls(true);
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 411));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jlbMaSPCT.setText("Mã sản phẩm:");

        jlbChatLieuCT.setText("Chất liệu:");

        jlbMauSacCT.setText("Màu sắc: ");

        jlbKichCoCT.setText("Kích cỡ:");

        jlbGiaBanCT.setText("Giá bán:");

        jlbSoLuongCT.setText("Số lượng:");

        jlbTrangThaiCT.setText("Trạng thái:");

        jlbImageCT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/no-load.jpg"))); // NOI18N
        jlbImageCT.setOpaque(true);
        jlbImageCT.setPreferredSize(new java.awt.Dimension(200, 220));

        jlbSanPhamCT.setText("Sản phẩm:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlbTrangThaiCT)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jlbMauSacCT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(jlbGiaBanCT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbSoLuongCT)))
                .addContainerGap(161, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGap(112, 112, 112)
                            .addComponent(jlbImageCT, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGap(169, 169, 169)
                                    .addComponent(jlbKichCoCT))
                                .addComponent(jlbMaSPCT)
                                .addComponent(jlbChatLieuCT)
                                .addComponent(jlbSanPhamCT))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(309, Short.MAX_VALUE)
                .addComponent(jlbMauSacCT)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbGiaBanCT)
                    .addComponent(jlbSoLuongCT))
                .addGap(18, 18, 18)
                .addComponent(jlbTrangThaiCT)
                .addGap(16, 16, 16))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jlbImageCT, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jlbMaSPCT)
                    .addGap(18, 18, 18)
                    .addComponent(jlbSanPhamCT)
                    .addGap(57, 57, 57)
                    .addComponent(jlbChatLieuCT)
                    .addGap(18, 18, 18)
                    .addComponent(jlbKichCoCT)
                    .addContainerGap(84, Short.MAX_VALUE)))
        );

        jScrollPane2.setViewportView(jPanel5);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel3, java.awt.BorderLayout.LINE_END);

        add(jPanel2, java.awt.BorderLayout.CENTER);

        jbtnThem.setText("Thêm sản phẩm");

        jbtnSua.setText("Sửa sản phẩm");

        jbtnXoa.setText("Xóa sản phẩm");

        jcbNameSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Mã", "Sản phẩm" }));

        jlbStatusSearch.setText("Trạng thái");

        jcbStatusSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jbtnSearch.setText("Tìm kiếm");

        jbtnClearFilterForm.setText("Làm mới");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jbtnThem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnSua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnXoa))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jcbNameSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnClearFilterForm)
                        .addGap(120, 120, 120)
                        .addComponent(jlbStatusSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbStatusSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(826, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnThem)
                    .addComponent(jbtnSua)
                    .addComponent(jbtnXoa))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbNameSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbStatusSearch)
                    .addComponent(jcbStatusSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnSearch)
                    .addComponent(jbtnClearFilterForm))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jpnFormSP.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin sản phẩm"));
        jpnFormSP.setPreferredSize(new java.awt.Dimension(1004, 260));

        jlbMa.setText("Mã");

        jlbChatLieu.setText("Chất liệu");

        jtfChatLieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfChatLieuActionPerformed(evt);
            }
        });

        jlbSoLuong.setText("Số lượng");

        jlbSanPham.setText("Sản phẩm");

        jlbMauSac.setText("Màu sắc");

        jlbGiaBan.setText("Giá bán");

        jlbStatus.setText("Trạng thái");

        jcbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jlbHinhAnh.setText("Hình ảnh");

        jtfHinhAnh.setAutoscrolls(false);
        jtfHinhAnh.setPreferredSize(new java.awt.Dimension(379, 22));

        jlbKichCo.setText("Kích cỡ");

        jcbKichCo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jbtnXacNhan.setText("Xác nhận");

        jbtnHuy.setText("Hủy");

        jbtnLamMoi.setText("Làm mới");

        buttonGroup1.add(jRadioUrl);
        jRadioUrl.setText("Url");

        buttonGroup1.add(jRadioFile);
        jRadioFile.setText("File");

        jbtnChonFile.setText("Chọn file");

        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jlbImage, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jpnFormSPLayout = new javax.swing.GroupLayout(jpnFormSP);
        jpnFormSP.setLayout(jpnFormSPLayout);
        jpnFormSPLayout.setHorizontalGroup(
            jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnFormSPLayout.createSequentialGroup()
                .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlbSanPham)
                    .addGroup(jpnFormSPLayout.createSequentialGroup()
                        .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbHinhAnh)
                            .addComponent(jlbMa))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpnFormSPLayout.createSequentialGroup()
                                .addComponent(jRadioUrl)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioFile))
                            .addGroup(jpnFormSPLayout.createSequentialGroup()
                                .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtfSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtfMa, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(74, 74, 74)
                                .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlbChatLieu)
                                    .addComponent(jlbMauSac))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfChatLieu, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(jtfMauSac)))
                            .addGroup(jpnFormSPLayout.createSequentialGroup()
                                .addComponent(jbtnChonFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfHinhAnh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jpnFormSPLayout.createSequentialGroup()
                        .addComponent(jbtnXacNhan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnLamMoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnHuy)))
                .addGap(74, 74, 74)
                .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnFormSPLayout.createSequentialGroup()
                        .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlbGiaBan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlbKichCo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbKichCo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(74, 74, 74)
                        .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlbStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlbSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 526, Short.MAX_VALUE))
        );
        jpnFormSPLayout.setVerticalGroup(
            jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnFormSPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbMa)
                    .addComponent(jtfMa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbChatLieu)
                    .addComponent(jtfChatLieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbGiaBan)
                    .addComponent(jlbSoLuong)
                    .addComponent(jtfSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbSanPham)
                    .addComponent(jtfSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbMauSac)
                    .addComponent(jtfMauSac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbKichCo)
                    .addComponent(jcbKichCo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbStatus)
                    .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnFormSPLayout.createSequentialGroup()
                        .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnFormSPLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jtfHinhAnh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlbHinhAnh)
                                .addComponent(jbtnChonFile)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioUrl)
                            .addComponent(jRadioFile))
                        .addGap(18, 18, 18)
                        .addGroup(jpnFormSPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbtnXacNhan)
                            .addComponent(jbtnHuy)
                            .addComponent(jbtnLamMoi)))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(66, 66, 66))
        );

        add(jpnFormSP, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

        private void jtfChatLieuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jtfChatLieuActionPerformed
                //

        }// GEN-LAST:event_jtfChatLieuActionPerformed

        public void editComponents() {
                jlbMa.setText("Mã*");
                jlbSanPham.setText("Sản phẩm*");
                jlbGiaBan.setText("Giá bán*");
                jcbKichCo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "S", "M", "L", "XL", "XLL" }));
                jcbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(SanPham.dsTrangThai));
                jcbStatusSearch.setModel(new javax.swing.DefaultComboBoxModel<>(SanPham.dsTrangThaiForFilter));
                displayImageCT("");
                // Image image = ((ImageIcon) jlbImageCT.getIcon()).getImage(); // transform it
                // Image newimg = image.getScaledInstance(160, 180,
                // java.awt.Image.SCALE_SMOOTH); // scale it the smooth
                // // way
                // jlbImageCT.setIcon(new ImageIcon(newimg));
        }

        // SET LIST FORM'S STATUS
        public boolean setListFormStatus(JPanel panel, Boolean status) {
                for (Component cp : panel.getComponents()) {
                        if (!(cp instanceof JButton))
                                cp.setEnabled(status);
                }
                return status;
        }

        // GET LIST FORM
        public SanPham getListForm() {
                String maSP = jtfMa.getText().toUpperCase();
                String tenSP = jtfSanPham.getText();
                String chatlieu = jtfChatLieu.getText();
                String mausac = jtfMauSac.getText();
                String kichco = jcbKichCo.getSelectedItem().toString();
                int giaban = Integer.parseInt(jtfGiaBan.getText());
                int soluong = Integer.parseInt(jtfSoLuong.getText());
                String trangthai = jcbStatus.getSelectedItem().toString();
                int status = 0;
                switch (trangthai) {
                        case "Ngừng bán":
                                status = 0;
                                break;
                        case "Chuẩn bị bán":
                                status = 1;
                                break;
                        case "Đang bán":
                                status = 2;
                                break;
                }
                String hinhanh = getFileHinhAnhFromForm();
                SanPham sp = new SanPham(maSP, tenSP, chatlieu, kichco, mausac, giaban, soluong, hinhanh, status);
                System.out.println(
                                maSP + " " + tenSP + " " + chatlieu + " " + kichco + " " + mausac + " " + giaban + " "
                                                + soluong + " " + hinhanh + " " + status);
                return sp;
        }

        public String getFileHinhAnhFromForm() {
                URL url;
                Image image;
                try {
                        if (jRadioUrl.isSelected()) {
                                url = new URL(jtfHinhAnh.getText());
                                image = ImageIO.read(url);
                        } else {
                                if (ImageIO.read(fileSelected) == null) {
                                        throw new Exception("Not image file");
                                }
                        }
                        return jtfHinhAnh.getText();
                } catch (Exception e) {
                        return "";
                }
        }

        // GET SEARCH FORM
        public ArrayList<Object> getSearchForm() {
                String name = jtfNameSearch.getText();
                int trangthai = jcbStatusSearch.getSelectedIndex();
                ArrayList<Object> search = new ArrayList<>((Arrays.asList(name, trangthai)));

                return search;
        }

        // CLEAR LIST FORM
        public void clearForm() {
                for (Component cp : jpnFormSP.getComponents()) {
                        if ((cp instanceof JTextField))
                                ((JTextField) cp).setText("");
                }
        }

        // CLEAR SEARCH FORM
        public void clearFormSearch() {
                jcbStatusSearch.setSelectedItem("Tất cả");
                jtfNameSearch.setText("");
                jcbNameSearchType.setSelectedItem("Tất cả");
        }

        // DEFAULT DETAILS FORM
        public void resetDetailForm() {
                jlbMaSPCT.setText("Mã sản phẩm:");
                jlbSanPhamCT.setText("Sản phẩm:");
                jlbChatLieuCT.setText("Chất liệu:");
                jlbMauSacCT.setText("Màu sắc:");
                jlbKichCoCT.setText("Kích cỡ:");
                jlbGiaBanCT.setText("Giá bán:");
                jlbSoLuongCT.setText("Số lượng:");
                jlbTrangThaiCT.setText("Trạng thái:");
        }

        // SET DETAILS FORM
        public void setDetailForm() {
                resetDetailForm();
                int selectedRow = jtbDSSP.getSelectedRow();
                if (selectedRow != -1) {
                        String maSP = jtbDSSP.getValueAt(selectedRow, 0).toString();
                        jlbMaSPCT.setText(jlbMaSPCT.getText() + " " + maSP);
                        SanPham sp = this.SanPhamBUS.getChiTiet(maSP);
                        jlbSanPhamCT.setText(jlbSanPhamCT.getText() + " " + sp.getTenSP());
                        jlbChatLieuCT.setText(jlbChatLieuCT.getText() + " " + sp.getChatLieu());
                        jlbMauSacCT.setText(jlbMauSacCT.getText() + " " + sp.getMauSac());
                        jlbKichCoCT.setText(jlbKichCoCT.getText() + " " + sp.getKichCo());
                        jlbGiaBanCT.setText(jlbGiaBanCT.getText() + " " + sp.getGiaBan());
                        jlbSoLuongCT.setText(jlbSoLuongCT.getText() + " " + sp.getSoLuong());
                        jlbTrangThaiCT.setText(jlbTrangThaiCT.getText() + " " + sp.getTrangThaiText());
                        displayImageCT(sp.getHinhAnh());
                }
        }

        // SET TABLE
        public void setTable() {
                // String type = jcbNameSearchType.getSelectedItem().toString();
                // ArrayList<Object> searchQuery = getSearchForm();
                // ArrayList<SanPham> spSearch = SanPhamBUS.searchSanPham(type, searchQuery);
                ArrayList<SanPham> sanPhamList = this.SanPhamBUS.getSanPham();
                checkList = sanPhamList;
                String[][] data = new String[checkList.size()][5];
                int i = 0;
                for (SanPham sp : checkList) {
                        data[i][0] = sp.getMaSP().toString();
                        data[i][1] = sp.getTenSP().toString();
                        data[i][2] = sp.getGiaBan() + "";
                        data[i][3] = sp.getSoLuong() + "";
                        String status = sp.getTrangThaiText();
                        data[i][4] = status;
                        i++;
                }
                jtbDSSP.setModel(new javax.swing.table.DefaultTableModel(
                                data,
                                new String[] {
                                                "Mã", "Sản phẩm", "Giá bán", "Số lượng", "Trạng thái"
                                }) {
                        boolean[] canEdit = new boolean[] {
                                        false, false, false, false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit[columnIndex];
                        }
                });
        }

        public ArrayList<SanPham> getSPSearch() {
                String type = jcbNameSearchType.getSelectedItem().toString();
                ArrayList<Object> searchQuery = getSearchForm();
                ArrayList<SanPham> spSearch = SanPhamBUS.searchSanPham(type, searchQuery);
                return spSearch;
        }

        public void setTable(ArrayList<SanPham> spList) {
                checkList = spList;
                String[][] data = new String[checkList.size()][5];
                int i = 0;
                for (SanPham sp : checkList) {
                        data[i][0] = sp.getMaSP().toString();
                        data[i][1] = sp.getTenSP().toString();
                        data[i][2] = sp.getGiaBan() + "";
                        data[i][3] = sp.getSoLuong() + "";
                        String status = sp.getTrangThaiText();
                        data[i][4] = status;
                        i++;
                }
                jtbDSSP.setModel(new javax.swing.table.DefaultTableModel(
                                data,
                                new String[] {
                                                "Mã", "Sản phẩm", "Giá bán", "Số lượng", "Trạng thái"
                                }) {
                        boolean[] canEdit = new boolean[] {
                                        false, false, false, false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit[columnIndex];
                        }
                });
        }

        // GET TABLE
        public void getTable() {
                int selectedRow = jtbDSSP.getSelectedRow();
                if (selectedRow != -1) {
                        jtfMa.setText(jtbDSSP.getValueAt(selectedRow, 0).toString());
                        SanPham sp = this.SanPhamBUS.getChiTiet(jtfMa.getText());
                        jtfSanPham.setText(jtbDSSP.getValueAt(selectedRow, 1).toString());
                        jtfChatLieu.setText(sp.getChatLieu());
                        jtfMauSac.setText(sp.getMauSac());
                        jtfHinhAnh.setText("");
                        jtfGiaBan.setText(String.valueOf(sp.getGiaBan()));
                        jtfSoLuong.setText(String.valueOf(sp.getSoLuong()));
                        jcbKichCo.setSelectedItem(sp.getKichCo().toString());
                        jcbStatus.setSelectedItem(jtbDSSP.getValueAt(selectedRow, 4).toString());
                }
        }

        // DEFAULT STATUS
        public void defaultStatus() {
                jpnFormSP.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin sản phẩm"));
                // jtbDSSP.setRowSelectionAllowed(true); vì dã thay đổi sang setEnabled nên ở
                // đây sẽ setEnabled lại
                jtbDSSP.setEnabled(true);
                jbtnXacNhan.setEnabled(false);
                jbtnHuy.setEnabled(false);
                jbtnXoa.setEnabled(true);
                jbtnThem.setEnabled(true);
                jbtnSua.setEnabled(true);
                jbtnLamMoi.setEnabled(false);
                jbtnChonFile.setEnabled(false);
                jRadioUrl.setSelected(true);
                ;
                setListFormStatus(jpnFormSP, false);
        }

        public void changeTypeChooseFileImage() {
                if (formStatus.equals("default") || formStatus.trim().length() == 0) {
                        return;
                }
                if (jRadioUrl.isSelected()) {
                        jbtnChonFile.setEnabled(false);
                        jtfHinhAnh.setEnabled(true);
                } else {
                        jtfHinhAnh.setText("");
                        jbtnChonFile.setEnabled(true);
                        jtfHinhAnh.setEnabled(false);
                }
        }

        public void displayImageCT(String hinhanh) {
                Image image;
                try {
                        if (hinhanh.isEmpty()) {
                                throw new Exception("hinh anh empty");
                        }
                        File sourceimage = new File(hinhanh);
                        image = ImageIO.read(sourceimage);
                } catch (Exception e) {
                        ImageIcon imageIcon = new ImageIcon(getClass()
                                        .getResource("/image/no-load.jpg"));
                        image = imageIcon.getImage();
                }
                Image newimg = image.getScaledInstance(
                                160, 160, java.awt.Image.SCALE_SMOOTH);
                jlbImageCT.setIcon(new ImageIcon(newimg));
        }

        public void displayImageSelected() {
                URL url;
                Image image;
                try {
                        if (jRadioUrl.isSelected()) {
                                url = new URL(jtfHinhAnh.getText());
                                image = ImageIO.read(url);
                        } else {
                                if (ImageIO.read(fileSelected) == null) {
                                        throw new Exception("Not image file");
                                }
                                ImageIcon imageIcon = new ImageIcon(fileSelected.getAbsolutePath());
                                image = imageIcon.getImage();
                        }
                } catch (Exception e) {
                        ImageIcon imageIcon = new ImageIcon(getClass()
                                        .getResource("/image/no-load.jpg"));
                        image = imageIcon.getImage();
                }
                Image newimg = image.getScaledInstance(
                                jPanel6.getWidth(), jPanel6.getHeight(), java.awt.Image.SCALE_SMOOTH);
                jlbImage.setIcon(new ImageIcon(newimg));
                if (jtfHinhAnh.getText().isEmpty()) {
                        jlbImage.setIcon(null);
                }
        }

        public void actionEvent() {
                // CHECK REQUIRED FIELDS
                requiredFieldList.add(jtfMa);
                requiredFieldList.add(jtfSanPham);
                requiredFieldList.add(jtfGiaBan);
                DocumentListener addListener = new DocumentListener() {
                        @Override
                        public void removeUpdate(DocumentEvent e) {
                                changedUpdate(e);
                        }

                        @Override
                        public void insertUpdate(DocumentEvent e) {
                                changedUpdate(e);
                        }

                        @Override
                        public void changedUpdate(DocumentEvent e) {
                                boolean canEnable = true;
                                for (JTextField tf : requiredFieldList) {
                                        if (tf.getText().isEmpty())
                                                canEnable = false;
                                }
                                if (formStatus.equals("edit") || formStatus.equals("add"))
                                        jbtnXacNhan.setEnabled(canEnable);
                                else
                                        jbtnXacNhan.setEnabled(false);
                        }
                };
                for (JTextField tf : requiredFieldList)
                        tf.getDocument().addDocumentListener(addListener);

                // SELECT TABLE
                ListSelectionModel jtbDSSPModel = jtbDSSP.getSelectionModel();
                jtbDSSPModel.addListSelectionListener(new ListSelectionListener() {
                        @Override
                        public void valueChanged(ListSelectionEvent e) {
                                getTable();
                                setDetailForm();
                        }
                });

                // CHECK FORM
                jtfMa.addFocusListener(new FocusListener() {
                        @Override
                        public void focusGained(FocusEvent e) {
                        }

                        @Override
                        public void focusLost(FocusEvent e) {
                                dupFlag = SanPhamBUS.checkDuplicate(jtfMa.getText());
                                if (dupFlag.equals("dup")) {
                                        JOptionPane.showMessageDialog(null, "Mã bị trùng, hãy đổi mã khác!", "WARNING",
                                                        JOptionPane.ERROR_MESSAGE);
                                        jtfMa.requestFocus();
                                }
                        }
                });
                jtfGiaBan.addFocusListener(new FocusListener() {
                        @Override
                        public void focusGained(FocusEvent e) {
                        }

                        @Override
                        public void focusLost(FocusEvent e) {
                                try {
                                        System.out.println(Integer.parseInt(jtfGiaBan.getText()));
                                        if (Integer.parseInt(jtfGiaBan.getText()) < 0) {
                                                JOptionPane.showMessageDialog(null, "Giá bán phải lớn hơn hoặc bằng 0!",
                                                                "WARNING",
                                                                JOptionPane.ERROR_MESSAGE);
                                                jtfGiaBan.requestFocus();
                                                return;
                                        }
                                } catch (Exception convertError) {
                                        if (!(jtfGiaBan.getText().isEmpty())) {
                                                JOptionPane.showMessageDialog(null, "Giá bán phải là số nguyên!",
                                                                "WARNING",
                                                                JOptionPane.ERROR_MESSAGE);
                                                jtfGiaBan.requestFocus();
                                                return;
                                        }
                                }
                        }
                });

                jtfHinhAnh.getDocument().addDocumentListener(new DocumentListener() {
                        Callback run = new Run() {
                                @Override
                                public void call() {
                                        displayImageSelected();
                                }
                        };
                        Debouncer d = new Debouncer(run, 500);

                        private void display() {
                                d.call(1);
                        }

                        @Override
                        public void insertUpdate(DocumentEvent e) {
                                // displayImageSelected();
                                display();
                        }

                        @Override
                        public void removeUpdate(DocumentEvent e) {
                                // displayImageSelected();
                                display();
                        }

                        @Override
                        public void changedUpdate(DocumentEvent e) {
                        }
                });

                ActionListener jRadioBtnListener = new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                                changeTypeChooseFileImage();
                        }
                };

                jRadioUrl.addActionListener(jRadioBtnListener);
                jRadioFile.addActionListener(jRadioBtnListener);

                jbtnChonFile.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                                JFileChooser jFileChooser = new JFileChooser();
                                FileFilter imageFilter = new FileNameExtensionFilter(
                                                "Image files", ImageIO.getReaderFileSuffixes());
                                jFileChooser.setFileFilter(imageFilter);
                                jFileChooser.setPreferredSize(new Dimension(1000, 500));
                                int returnValue = jFileChooser.showOpenDialog(null);
                                if (returnValue == JFileChooser.APPROVE_OPTION) {
                                        fileSelected = jFileChooser.getSelectedFile();
                                        try {
                                                jtfHinhAnh.setText(fileSelected.getAbsolutePath());
                                        } catch (Exception ex) {
                                                System.out.println("problem accessing file"
                                                                + fileSelected.getAbsolutePath());
                                        }
                                        displayImageSelected();
                                }
                        }
                });

                // ADD STATUS
                jbtnThem.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                                formStatus = "add";
                                setListFormStatus(jpnFormSP, true);
                                clearForm();
                                jpnFormSP.setBorder(javax.swing.BorderFactory.createTitledBorder("Thêm sản phẩm mới"));
                                jbtnSua.setEnabled(false);
                                jbtnHuy.setEnabled(true);
                                jbtnXoa.setEnabled(false);
                                jbtnThem.setEnabled(true);
                                jbtnLamMoi.setEnabled(true);
                                /*
                                 * jtbDSSP.setCellSelectionEnabled(false);
                                 * jtbDSSP.setFocusable(false);
                                 * jtbDSSP.setOpaque(false); đổi 3 dòng này sang 2 dòng jtbDSSP bên dưới
                                 */
                                jtbDSSP.clearSelection(); // dọn các selection đang có trên bảng
                                jtbDSSP.setEnabled(false); // tắt các thao tác liên quan tới bản (select, edit, ...)
                                jtfSoLuong.setEnabled(false);
                                jtfSoLuong.setText("0");
                        }
                });

                // EDIT STATUS
                jbtnSua.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                                if (jtbDSSP.getSelectedRow() == -1) {
                                        JOptionPane.showMessageDialog(
                                                        null,
                                                        "Chưa chọn sản phẩm",
                                                        "Thông báo",
                                                        JOptionPane.WARNING_MESSAGE);
                                        return;
                                }
                                formStatus = "edit";
                                setListFormStatus(jpnFormSP, true);
                                jpnFormSP.setBorder(
                                                javax.swing.BorderFactory.createTitledBorder("Sửa chi tiết sản phẩm"));
                                jbtnThem.setEnabled(false);
                                jbtnXoa.setEnabled(false);
                                jbtnXacNhan.setEnabled(true);
                                jbtnHuy.setEnabled(true);
                                jtfSoLuong.setEnabled(false);
                                jtfMa.setEnabled(false);
                                jbtnLamMoi.setEnabled(true);
                        }
                });

                jbtnXoa.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                                if (jtbDSSP.getSelectedRow() == -1) {
                                        JOptionPane.showMessageDialog(
                                                        null,
                                                        "Chưa chọn sản phẩm",
                                                        "Thông báo",
                                                        JOptionPane.WARNING_MESSAGE);
                                        return;
                                }
                                int typeDelete = 0;
                                String message = "";
                                if (SanPhamBUS.checkSPJoinedHD(jtfMa.getText().toString())) {
                                        message += "Xóa sản phẩm nhưng vẫn giữ các giao dịch có sản phẩm này!\n";
                                        typeDelete = 1;
                                }
                                if (SanPhamBUS.checkAPDKMSP(jtfMa.getText().toString())) {
                                        message += "Sản phẩm đang trong thời gian khuyến mãi. Xóa sản phẩm sẽ ngừng khuyến mãi sản phẩm này.\n";
                                }
                                message += "Xác nhận xóa?";
                                JOptionPane ask = new JOptionPane();
                                int choice = JOptionPane.showConfirmDialog(ask, message, "XOÁ SẢN PHẨM",
                                                JOptionPane.YES_NO_OPTION);
                                if (choice == JOptionPane.YES_OPTION) {
                                        if (message.contains("khuyến mãi")) {
                                                SanPhamBUS.stopSPADKM(jtfMa.getText().toString());
                                        }
                                        SanPhamBUS.deleteSanPham(jtfMa.getText().toString(), typeDelete);
                                        JOptionPane.showMessageDialog(null, "Xoá sản phẩm thành công!");
                                        ask.setValue(false);
                                        setTable();
                                        clearForm();
                                        defaultStatus();
                                } else if (choice == JOptionPane.NO_OPTION) {
                                        ask.setValue(false);
                                }
                        }
                });

                jbtnXacNhan.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                                SanPham sp = getListForm();
                                if (formStatus.equals("add")) {
                                        if (SanPhamBUS.addSanPham(sp, dupFlag)) {
                                                clearForm();
                                                clearFormSearch();
                                                defaultStatus();
                                                setTable();

                                        } else {
                                                return;
                                        }
                                } else if (formStatus.equals("edit")) {
                                        String currentStatus = jtbDSSP.getValueAt(jtbDSSP.getSelectedRow(), 4)
                                                        .toString();
                                        // kiểm tra trạng thái có phải là đang bán và có thay đổi
                                        if (currentStatus.equals("Đang bán") &&
                                                        (sp.getTrangThaiText().equals("Đang bán") == false)) {
                                                // kiểm tra sản phẩm này có đang được khuyến mãi
                                                if (SanPhamBUS.checkAPDKMSP(sp.getMaSP())) {
                                                        int option = JOptionPane.showConfirmDialog(
                                                                        null,
                                                                        "Sản phẩm đang trong thời gian khuyến mãi. " +
                                                                                        String.format(
                                                                                                        "Thay đổi trạng thái sang \"%s\" sẽ ngừng khuyến mãi. Xác nhận thay đổi?",
                                                                                                        sp.getTrangThaiText()),
                                                                        "Thông báo",
                                                                        JOptionPane.YES_NO_OPTION,
                                                                        JOptionPane.WARNING_MESSAGE);
                                                        if (option == JOptionPane.YES_OPTION) {
                                                                SanPhamBUS.stopSPADKM(sp.getMaSP());
                                                        } else {
                                                                return;
                                                        }
                                                }
                                        }
                                        SanPhamBUS.updateSanPham(sp);
                                        defaultStatus();
                                        ArrayList<SanPham> spSearch = getSPSearch();
                                        setTable(spSearch);
                                }
                                formStatus = "default";
                                // selected row vừa thay đổi
                                for (int i = 0; i < jtbDSSP.getRowCount(); i++) {
                                        if (sp.getMaSP().equals(jtbDSSP.getValueAt(i, 0))) {
                                                jtbDSSP.setRowSelectionInterval(i, i);
                                                break;
                                        }
                                }
                                jlbImage.setIcon(null);
                        }

                });

                jbtnLamMoi.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                                clearForm();
                        }
                });

                jbtnHuy.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                                if (formStatus.equals("add")) {
                                        clearForm();
                                } else if (formStatus.equals("edit")) {
                                        getTable();
                                }
                                formStatus = "default";
                                defaultStatus();
                        }
                });
                // SEARCH BAR
                jbtnSearch.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                                jtbDSSP.clearSelection();
                                clearForm();
                                ArrayList<SanPham> spSearch = getSPSearch();
                                setTable(spSearch);
                        }
                });

                jbtnClearFilterForm.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                                jtbDSSP.clearSelection();
                                clearForm();
                                clearFormSearch();
                                setTable();
                        }
                });
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioFile;
    private javax.swing.JRadioButton jRadioUrl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnChonFile;
    private javax.swing.JButton jbtnClearFilterForm;
    private javax.swing.JButton jbtnHuy;
    private javax.swing.JButton jbtnLamMoi;
    private javax.swing.JButton jbtnSearch;
    private javax.swing.JButton jbtnSua;
    private javax.swing.JButton jbtnThem;
    private javax.swing.JButton jbtnXacNhan;
    private javax.swing.JButton jbtnXoa;
    private javax.swing.JComboBox<String> jcbKichCo;
    private javax.swing.JComboBox<String> jcbNameSearchType;
    private javax.swing.JComboBox<String> jcbStatus;
    private javax.swing.JComboBox<String> jcbStatusSearch;
    private javax.swing.JLabel jlbChatLieu;
    private javax.swing.JLabel jlbChatLieuCT;
    private javax.swing.JLabel jlbGiaBan;
    private javax.swing.JLabel jlbGiaBanCT;
    private javax.swing.JLabel jlbHinhAnh;
    private javax.swing.JLabel jlbImage;
    private javax.swing.JLabel jlbImageCT;
    private javax.swing.JLabel jlbKichCo;
    private javax.swing.JLabel jlbKichCoCT;
    private javax.swing.JLabel jlbMa;
    private javax.swing.JLabel jlbMaSPCT;
    private javax.swing.JLabel jlbMauSac;
    private javax.swing.JLabel jlbMauSacCT;
    private javax.swing.JLabel jlbSanPham;
    private javax.swing.JLabel jlbSanPhamCT;
    private javax.swing.JLabel jlbSoLuong;
    private javax.swing.JLabel jlbSoLuongCT;
    private javax.swing.JLabel jlbStatus;
    private javax.swing.JLabel jlbStatusSearch;
    private javax.swing.JLabel jlbTrangThaiCT;
    private javax.swing.JPanel jpnFormSP;
    private javax.swing.JTable jtbDSSP;
    private javax.swing.JTextField jtfChatLieu;
    private javax.swing.JTextField jtfGiaBan;
    private javax.swing.JTextField jtfHinhAnh;
    private javax.swing.JTextField jtfMa;
    private javax.swing.JTextField jtfMauSac;
    private javax.swing.JTextField jtfNameSearch;
    private javax.swing.JTextField jtfSanPham;
    private javax.swing.JTextField jtfSoLuong;
    // End of variables declaration//GEN-END:variables
}

class Run implements Callback {
        @Override
        public void call() {
                System.out.println("Default call");
        }
}
