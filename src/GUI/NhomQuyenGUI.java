/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import BUS.NhomQuyenBUS;
import DAO.NhomQuyenDAO;
import DTO.ChiTietNhomQuyen;
import DTO.NhomQuyen;
import SWING.ChucNangContainer;
import SWING.ChucNangItem;
import SWING.ChucNangItemTitle;

/**
 *
 * @author BomPC
 */
public class NhomQuyenGUI extends javax.swing.JPanel {

    /**
     * Creates new form NhomQuyenGUI
     */
    public NhomQuyenGUI(ArrayList<String> dsHanhDongCuaChucNang) {
        initComponents();
        customComponents();

        jbtnThem.setVisible(false);
		jbtnSua.setVisible(false);
        jbtnXoa.setVisible(false);
		for (String hd : dsHanhDongCuaChucNang) {
			if (hd.toLowerCase().contains("thêm")) {
				jbtnThem.setVisible(true);
			} else if (hd.toLowerCase().contains("sửa")) {
				jbtnSua.setVisible(true);
			} else if (hd.toLowerCase().contains("xóa")) {
                jbtnXoa.setVisible(true);
            }
		}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtnThem = new javax.swing.JButton();
        jbtnSua = new javax.swing.JButton();
        jbtnXoa = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jpnForm = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfManq = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfTennq = new javax.swing.JTextField();
        jbtnXacNhan = new javax.swing.JButton();
        jbtnHuy = new javax.swing.JButton();
        jbtnLamMoi = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbNq = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jpnDSCN = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jbtnThem.setText("Thêm nhóm quyền");

        jbtnSua.setText("Sửa nhóm quyền");

        jbtnXoa.setText("Xóa nhóm quyền");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtnThem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnSua)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnXoa)
                .addContainerGap(399, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnThem)
                    .addComponent(jbtnSua)
                    .addComponent(jbtnXoa))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setPreferredSize(new java.awt.Dimension(500, 346));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jpnForm.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin nhóm quyền"));

        jLabel1.setText("Mã nhóm quyền");

        jLabel2.setText("Tên nhóm quyền");

        jbtnXacNhan.setText("Xác nhận");

        jbtnHuy.setText("Hủy");

        jbtnLamMoi.setText("Làm mới");

        javax.swing.GroupLayout jpnFormLayout = new javax.swing.GroupLayout(jpnForm);
        jpnForm.setLayout(jpnFormLayout);
        jpnFormLayout.setHorizontalGroup(
            jpnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnFormLayout.createSequentialGroup()
                        .addGroup(jpnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfManq, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfTennq))
                        .addContainerGap(228, Short.MAX_VALUE))
                    .addGroup(jpnFormLayout.createSequentialGroup()
                        .addComponent(jbtnXacNhan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnLamMoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnHuy)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jpnFormLayout.setVerticalGroup(
            jpnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfManq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfTennq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jpnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnXacNhan)
                    .addComponent(jbtnHuy)
                    .addComponent(jbtnLamMoi))
                .addContainerGap())
        );

        jPanel3.add(jpnForm, java.awt.BorderLayout.PAGE_END);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Nhóm quyền"));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jtbNq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Mã nhóm quyền", "Tên nhóm quyền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtbNq);
        if (jtbNq.getColumnModel().getColumnCount() > 0) {
            jtbNq.getColumnModel().getColumn(0).setResizable(false);
            jtbNq.getColumnModel().getColumn(1).setResizable(false);
        }

        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel3, java.awt.BorderLayout.LINE_START);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Chức năng của nhóm quyền"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setToolTipText("");

        jpnDSCN.setMinimumSize(new java.awt.Dimension(80, 90));
        jpnDSCN.setPreferredSize(new java.awt.Dimension(80, 600));
        jpnDSCN.setLayout(new java.awt.GridLayout(4, 3, 50, 30));
        jScrollPane3.setViewportView(jpnDSCN);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtnHuy;
    private javax.swing.JButton jbtnLamMoi;
    private javax.swing.JButton jbtnSua;
    private javax.swing.JButton jbtnThem;
    private javax.swing.JButton jbtnXacNhan;
    private javax.swing.JButton jbtnXoa;
    private javax.swing.JPanel jpnDSCN;
    private javax.swing.JPanel jpnForm;
    private javax.swing.JTable jtbNq;
    private javax.swing.JTextField jtfManq;
    private javax.swing.JTextField jtfTennq;
    // End of variables declaration//GEN-END:variables

    private NhomQuyenBUS bus;
    private Map<JCheckBox, Integer> dsCheckBoxTitle;
    private Map<Integer, Map<JCheckBox, String>> dsCheckBoxItem;

    public void customComponents() {
        bus = new NhomQuyenBUS(new NhomQuyenDAO());
        setupHandleActionButton();
        setupSelectionTable();
        renderDSNQ();
        renderBaseDSCN();
        setupViewState();
    }

    public void setupHandleActionButton() {
        jbtnThem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jtbNq.clearSelection();
                setupThemState();
                clearCheckedOnBaseDSCN();
                clearInforNq();
            }
        });
        jbtnSua.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRowIndex = jtbNq.getSelectedRow();
                if (selectedRowIndex == -1) {
                    showMessage("Chưa chọn nhóm quyền!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                if (jtbNq.getValueAt(selectedRowIndex, 0).equals("QL")) {
                    showMessage(
                            String.format("Không thể sửa nhóm quyền %s-%s!",
                                    (String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 0),
                                    (String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 1)),
                            "Thông báo", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                setupSuaState();
            }
        });
        jbtnXoa.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRowIndex = jtbNq.getSelectedRow();
                if (selectedRowIndex == -1) {
                    showMessage("Chưa chọn nhóm quyền!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                if (jtbNq.getValueAt(selectedRowIndex, 0).equals("QL")) {
                    showMessage(
                            String.format("Không thể xóa nhóm quyền %s-%s!",
                                    (String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 0),
                                    (String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 1)),
                            "Thông báo", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                int option = JOptionPane.showConfirmDialog(
                        null,
                        String.format("Xác nhận xóa nhóm quyền %s-%s",
                                (String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 0),
                                (String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 1)),
                        "Thông báo xác nhận",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.INFORMATION_MESSAGE);
                if (option == JOptionPane.YES_OPTION) {
                    int count = bus.countNhanVienUsedNq((String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 0));
                    if (count == 0) {
                        handleXoaNq();
                    } else {
                        showMessage(String.format("Có %s nhân viên đang sử dụng nhóm quyền! Không thể xóa!", count),
                                "Thông báo", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        });
        jbtnXacNhan.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRowIndex = jtbNq.getSelectedRow();
                if (selectedRowIndex == -1) {
                    handleThemNq();
                } else {
                    handleSuaNq();
                }
            }
        });
        jbtnLamMoi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearCheckedOnBaseDSCN();
                clearInforNq();
            }
        });
        jbtnHuy.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setupViewState();
                if (jtbNq.getSelectedRow() == -1) {
                    clearCheckedOnBaseDSCN();
                    clearInforNq();
                } else {
                    renderCheckedSelectedNq(jtbNq.getSelectedRow());
                    renderInforNq();
                }
            }
        });
    }

    public void setupSelectionTable() {
        ListSelectionModel model = jtbNq.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int selectedRowIndex = jtbNq.getSelectedRow();
                if (selectedRowIndex != -1) {
                    renderCheckedSelectedNq(selectedRowIndex);
                    renderInforNq();
                }
            }
        });
    }

    public void renderDSNQ() {
        String[][] data = bus.getDsnq();
        jtbNq.setModel(new javax.swing.table.DefaultTableModel(
                data,
                new String[] {
                        "Mã nhóm quyền", "Tên nhóm quyền"
                }) {
            boolean[] canEdit = new boolean[] {
                    false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        revalidate();
    }

    public void renderInforNq() {
        jtfManq.setText((String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 0));
        jtfTennq.setText((String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 1));
    }

    public void clearInforNq() {
        jtfManq.setText("");
        jtfTennq.setText("");
    }

    public NhomQuyen getDataFromForm(String typeAction) {
        String manq = jtfManq.getText().trim();
        String tennq = jtfTennq.getText().trim();
        if (manq.length() == 0) {
            showMessage("Mã nhóm quyền là bắt buộc!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            requestFocus(1);
            return null;
        }
        if (tennq.length() == 0) {
            showMessage("Tên nhóm quyền là bắt buộc!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            requestFocus(2);
            return null;
        }
        if (bus.getNhomQuyenByMa(manq) != null) {
            switch (typeAction) {
                case "them":
                    showMessage("Mã nhóm quyền đã tồn tại", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    requestFocus(1);
                    return null;
                case "sua":
                    if (manq.toLowerCase().equals(
                            String.valueOf(jtbNq.getValueAt(jtbNq.getSelectedRow(), 0)).toLowerCase()) == false) {
                        showMessage("Mã nhóm quyền đã tồn tại", "Thông báo", JOptionPane.WARNING_MESSAGE);
                        requestFocus(1);
                        return null;
                    }
            }
        }
        if (bus.getNhomQuyenByTen(tennq) != null) {
            switch (typeAction) {
                case "them":
                    showMessage("Tên nhóm quyền đã tồn tại", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    requestFocus(2);
                    return null;
                case "sua":
                    if (tennq.toLowerCase().equals(
                            String.valueOf(jtbNq.getValueAt(jtbNq.getSelectedRow(), 1)).toLowerCase()) == false) {
                        showMessage("Tên nhóm quyền đã tồn tại", "Thông báo", JOptionPane.WARNING_MESSAGE);
                        requestFocus(2);
                        return null;
                    }
            }
        }
        return new NhomQuyen(manq, tennq);
    }

    public void showMessage(String message, String title, int typeMessage) {
        JOptionPane.showMessageDialog(this, message, title, typeMessage);
    }

    public void requestFocus(int stt) {
        switch (stt) {
            case 1:
                jtfManq.requestFocus();
                break;
            case 2:
                jtfTennq.requestFocus();
                break;
        }
    }

    public void setupViewState() {
        jpnForm.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin nhóm quyền"));

        jbtnThem.setEnabled(true);
        jbtnSua.setEnabled(true);
        jbtnXoa.setEnabled(true);
        jbtnXacNhan.setEnabled(false);
        jbtnLamMoi.setEnabled(false);
        jbtnHuy.setEnabled(false);

        disabledStateCheckBox();

        jtbNq.setEnabled(true);
        jtfManq.setEnabled(false);
        jtfTennq.setEnabled(false);
    }

    public void setupThemState() {
        jpnForm.setBorder(javax.swing.BorderFactory.createTitledBorder("Thêm nhóm quyền"));

        jbtnSua.setEnabled(false);
        jbtnXoa.setEnabled(false);
        jbtnXacNhan.setEnabled(true);
        jbtnLamMoi.setEnabled(true);
        jbtnHuy.setEnabled(true);

        enabledStateCheckBox();

        jtbNq.setEnabled(false);
        jtfManq.setEnabled(true);
        jtfTennq.setEnabled(true);
        requestFocus(1);
    }

    public void setupSuaState() {
        jpnForm.setBorder(javax.swing.BorderFactory.createTitledBorder("Sửa thông tin nhóm quyền"));

        jbtnXacNhan.setEnabled(true);
        jbtnLamMoi.setEnabled(true);
        jbtnHuy.setEnabled(true);

        enabledStateCheckBox();

        jtbNq.setEnabled(false);
        jtfManq.setEnabled(false);
        jtfTennq.setEnabled(true);
        requestFocus(1);
    }

    public void handleThemNq() {
        NhomQuyen data = getDataFromForm("them");
        if (data != null) {
            bus.themNhomQuyen(data);
            bus.changedChiTietNhomQuyen(data.getMaNhomQuyen(), dsCheckBoxTitle, dsCheckBoxItem);
            showMessage("Thêm nhóm quyền thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            renderDSNQ();
            setupViewState();
            int posNewNq = jtbNq.getModel().getRowCount() - 1;
            jtbNq.setRowSelectionInterval(posNewNq, posNewNq);
        }
    }

    public void handleSuaNq() {
        NhomQuyen data = getDataFromForm("sua");
        if (data != null) {
            int selectedRowIndex = jtbNq.getSelectedRow();
            String manq = (String) jtbNq.getValueAt(selectedRowIndex, 0);
            bus.suaNhomQuyen(manq, data);
            bus.changedChiTietNhomQuyen(manq, dsCheckBoxTitle, dsCheckBoxItem);
            showMessage("Sửa nhóm quyền thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            renderDSNQ();
            setupViewState();
            jtbNq.setRowSelectionInterval(selectedRowIndex, selectedRowIndex);
        }
    }

    public void handleXoaNq() {
        bus.xoaNhomQuyen((String) jtbNq.getValueAt(jtbNq.getSelectedRow(), 0));
        showMessage("Xóa nhóm quyền thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        renderDSNQ();
        setupViewState();
        clearCheckedOnBaseDSCN();
        clearInforNq();
    }

    public void renderBaseDSCN() {
        Map<Integer, ArrayList<ChiTietNhomQuyen>> basedscn = bus.getBaseDscn();
        dsCheckBoxTitle = new LinkedHashMap<JCheckBox, Integer>();
        dsCheckBoxItem = new LinkedHashMap<Integer, Map<JCheckBox, String>>();

        ItemListener titleListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                handleStateChangedTitleCheckBox(e);
            }
        };
        ItemListener itemListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                handleStateChangedItemCheckBox(e);
            }
        };

        for (int macn : basedscn.keySet()) {
            JCheckBox checkBox = new JCheckBox();
            checkBox.addItemListener(titleListener);
            checkBox.setEnabled(false);
            dsCheckBoxTitle.put(checkBox, macn);
            dsCheckBoxItem.put(macn, new LinkedHashMap<JCheckBox, String>());
        }

        for (Map.Entry<Integer, ArrayList<ChiTietNhomQuyen>> entry : basedscn.entrySet()) {
            Map<JCheckBox, String> dsHanhDong = dsCheckBoxItem.get(entry.getKey());
            for (ChiTietNhomQuyen ct : entry.getValue()) {
                JCheckBox checkBox = new JCheckBox();
                checkBox.addItemListener(itemListener);
                checkBox.setEnabled(false);
                dsHanhDong.put(checkBox, ct.getHanhDong());
            }
        }

        for (JCheckBox titleCheckBox : dsCheckBoxTitle.keySet()) {
            ChucNangContainer container = new ChucNangContainer();
            int macn = dsCheckBoxTitle.get(titleCheckBox);
            ChucNangItemTitle title = new ChucNangItemTitle(
                    titleCheckBox, new JLabel(basedscn.get(macn).get(0).getCn().getTencn()));
            container.add(title);
            Map<JCheckBox, String> dsHanhDong = dsCheckBoxItem.get(macn);
            for (JCheckBox itemCheckBox : dsHanhDong.keySet()) {
                ChucNangItem item = new ChucNangItem(
                        itemCheckBox, new JLabel(dsHanhDong.get(itemCheckBox)));
                container.add(item);
            }
            jpnDSCN.add(container);
        }
        revalidate();
    }

    public void handleStateChangedTitleCheckBox(ItemEvent e) {
        JCheckBox checkBox = (JCheckBox) e.getSource();
        int macn = dsCheckBoxTitle.get(checkBox);
        Map<JCheckBox, String> dsHanhDong = dsCheckBoxItem.get(macn);
        if (e.getStateChange() == 1) {
            // checked
            if (checkBox.isEnabled()) {
                for (JCheckBox key : dsHanhDong.keySet()) {
                    key.setEnabled(true);
                    key.setSelected(true);
                }
            } else {
                for (JCheckBox key : dsHanhDong.keySet()) {
                    key.setSelected(true);
                }
            }
        } else {
            // unchecked
            for (JCheckBox key : dsHanhDong.keySet()) {
                key.setEnabled(false);
                key.setSelected(false);
            }
        }
    }

    public void handleStateChangedItemCheckBox(ItemEvent e) {
        for (Map.Entry<JCheckBox, Integer> chucnang : dsCheckBoxTitle.entrySet()) {
            for (Map.Entry<JCheckBox, String> hanhdong : dsCheckBoxItem.get(chucnang.getValue()).entrySet()) {
                if (hanhdong.getKey().equals((JCheckBox) e.getSource())) {
                    if (e.getStateChange() != 1) {
                        if (hanhdong.getValue().contains("Xem") && chucnang.getKey().isSelected()) {
                            hanhdong.getKey().setSelected(true);
                        }
                    }
                }
            }
        }
    }

    public void enabledStateCheckBox() {
        for (Map.Entry<JCheckBox, Integer> chucnang : dsCheckBoxTitle.entrySet()) {
            chucnang.getKey().setEnabled(true);
            if (chucnang.getKey().isSelected()) {
                for (JCheckBox hd : dsCheckBoxItem.get(chucnang.getValue()).keySet()) {
                    hd.setEnabled(true);
                }
            }
        }
    }

    public void disabledStateCheckBox() {
        for (Map.Entry<JCheckBox, Integer> chucnang : dsCheckBoxTitle.entrySet()) {
            chucnang.getKey().setEnabled(false);
            if (chucnang.getKey().isSelected()) {
                for (JCheckBox hd : dsCheckBoxItem.get(chucnang.getValue()).keySet()) {
                    hd.setEnabled(false);
                }
            }
        }
    }

    public void renderCheckedSelectedNq(int row) {
        Map<Integer, ArrayList<String>> selectedNqDscn = bus.getDscnOfSelectedNq((String) jtbNq.getValueAt(row, 0));
        for (Map.Entry<JCheckBox, Integer> chucnang : dsCheckBoxTitle.entrySet()) {
            ArrayList<String> dshd = selectedNqDscn.get(chucnang.getValue());
            if (dshd != null) {
                chucnang.getKey().setSelected(true);
                for (Map.Entry<JCheckBox, String> hd : dsCheckBoxItem.get(chucnang.getValue()).entrySet()) {
                    if (dshd.contains(hd.getValue())) {
                        hd.getKey().setSelected(true);
                    } else {
                        hd.getKey().setSelected(false);
                    }
                }
            } else {
                chucnang.getKey().setSelected(false);
            }
        }
    }

    public void clearCheckedOnBaseDSCN() {
        for (JCheckBox checkBox : dsCheckBoxTitle.keySet()) {
            checkBox.setSelected(false);
        }
    }
}
