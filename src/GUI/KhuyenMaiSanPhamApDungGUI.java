/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BUS.KhuyenMaiSanPhamApDungBUS;
import DAO.KhuyenMaiSanPhamApDungDAO;
import DTO.DotKhuyenMai;
import DTO.FormatValue;
import DTO.SanPham;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.metal.MetalCheckBoxIcon;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author BomPC
 */
public class KhuyenMaiSanPhamApDungGUI extends javax.swing.JPanel {

    /**
     * Creates new form KhuyenMaiSanPhamApDungGUI
     */

    public KhuyenMaiSanPhamApDungGUI(JDialog dialog, DotKhuyenMai dkm) {
        this.dialog = dialog;
        initComponents();
        customComponents(dkm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jlbTenKhuyenMai = new javax.swing.JLabel();
        jlbGiaTri = new javax.swing.JLabel();
        jlbThoiGianKhuyenMai = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jbtnXacNhan = new javax.swing.JButton();
        jbtnHuy = new javax.swing.JButton();
        jbtnThoat = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbDSSP = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtfSanPhamSearch = new javax.swing.JTextField();
        jbtnLamMoi = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jcheckboxAll = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbDSSPAPKM = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(816, 100));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Áp dụng khuyến mãi");
        jPanel1.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jPanel4.setLayout(new java.awt.GridLayout(3, 1));

        jlbTenKhuyenMai.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbTenKhuyenMai.setText("Tên khuyến mãi (chương trình khuyến mãi)");
        jPanel4.add(jlbTenKhuyenMai);

        jlbGiaTri.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbGiaTri.setText("Giảm \"giá trị\" % ");
        jPanel4.add(jlbGiaTri);

        jlbThoiGianKhuyenMai.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbThoiGianKhuyenMai.setText("Diễn ra từ \"ngày bắt đầu\" đến \"ngày kết thúc\" - datetime theo format \"hh:mm::ss dd-mm-yyyy\"");
        jPanel4.add(jlbThoiGianKhuyenMai);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setPreferredSize(new java.awt.Dimension(828, 60));
        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.columnWidths = new int[] {0, 16, 0, 16, 0};
        jPanel2Layout.rowHeights = new int[] {0};
        jPanel2.setLayout(jPanel2Layout);

        jbtnXacNhan.setText("Xác nhận");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jbtnXacNhan, gridBagConstraints);

        jbtnHuy.setText("Hủy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jbtnHuy, gridBagConstraints);

        jbtnThoat.setText("Thoát");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jbtnThoat, gridBagConstraints);

        add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.GridLayout(1, 2));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Danh sách sản phẩm"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jtbDSSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"SP1", "sản phẩm 1", "1",  new Boolean(false)},
                {"SP2", "sản phẩm 2", "2",  new Boolean(false)},
                {"SP3", "sản phẩm 3", "3",  new Boolean(false)},
                {"SP4", "sản phẩm 4", "4",  new Boolean(false)}
            },
            new String [] {
                "Mã sản phẩm", "Sản phẩm", "Giá bán gốc", "Áp dụng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtbDSSP);
        if (jtbDSSP.getColumnModel().getColumnCount() > 0) {
            jtbDSSP.getColumnModel().getColumn(0).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(1).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(2).setResizable(false);
            jtbDSSP.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(100, 52));

        jLabel2.setText("Tìm kiếm sản phẩm");

        jbtnLamMoi.setText("Làm mới");

        jLabel3.setText("Tất cả");

        jcheckboxAll.setMaximumSize(new java.awt.Dimension(22, 22));
        jcheckboxAll.setMinimumSize(new java.awt.Dimension(22, 22));
        jcheckboxAll.setOpaque(true);
        jcheckboxAll.setPreferredSize(new java.awt.Dimension(22, 38));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcheckboxAll, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfSanPhamSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnLamMoi)
                .addContainerGap(129, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfSanPhamSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnLamMoi)
                    .addComponent(jLabel3))
                .addGap(14, 14, 14))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcheckboxAll, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        jPanel3.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Danh sách sản phẩm áp dụng khuyến mãi"));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jtbDSSPAPKM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Sản phẩm", "Giá bán đã giảm", "Áp dụng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtbDSSPAPKM);

        jPanel6.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel6);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnHuy;
    private javax.swing.JButton jbtnLamMoi;
    private javax.swing.JButton jbtnThoat;
    private javax.swing.JButton jbtnXacNhan;
    private javax.swing.JCheckBox jcheckboxAll;
    private javax.swing.JLabel jlbGiaTri;
    private javax.swing.JLabel jlbTenKhuyenMai;
    private javax.swing.JLabel jlbThoiGianKhuyenMai;
    private javax.swing.JTable jtbDSSP;
    private javax.swing.JTable jtbDSSPAPKM;
    private javax.swing.JTextField jtfSanPhamSearch;
    // End of variables declaration//GEN-END:variables

    private JDialog dialog;
    private KhuyenMaiSanPhamApDungBUS bus;
    private TableModelListener jtbDSSPModelListener;
    private TableModelListener jtbDSSPADKMModelListener;

    public void customComponents(DotKhuyenMai dkm) {
        bus = new KhuyenMaiSanPhamApDungBUS(new KhuyenMaiSanPhamApDungDAO(dkm));
        setUpHandleChangedValueOfColumnInTable();
        setUpHandleActionButton();
        setUpCheckBoxAll();
        setUpSearchSanPham();
        renderInfoADKM();
        renderDSSP();
        renderDSSPADKM();
    }

    public void renderInfoADKM() {
        DotKhuyenMai dotKM = bus.getDotKM();
        jlbTenKhuyenMai.setText(dotKM.getChuongTrinhKM().getTenkm());
        jlbGiaTri.setText("Giảm " + dotKM.getGiaTri() + "%");
        jlbThoiGianKhuyenMai.setText(
                String.format(
                        "Diễn ra từ %s đên %s",
                        FormatValue.formatDateTime(dotKM.getNgayBatDau()),
                        FormatValue.formatDateTime(dotKM.getNgayKetThuc())));
    }

    public void renderDSSP() {
        Object[][] data = bus.getDSSP();
        if (data.length == 0) {
            jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Trong thời gian này không còn sản phẩm có thể khuyến mãi!"));
        }
        jtbDSSP.setModel(new javax.swing.table.DefaultTableModel(
                data,
                new String[] {
                        "Mã sản phẩm", "Sản phẩm", "Giá bán gốc", "Áp dụng"
                }) {
            Class[] types = new Class[] {
                    java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean[] {
                    false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        TableModel tableModelDSSP = jtbDSSP.getModel();
        tableModelDSSP.addTableModelListener(jtbDSSPModelListener);
        revalidate();
    }

    public void renderDSSPADKM() {
        Object[][] data = bus.getDSSPADKM();
        jtbDSSPAPKM.setModel(new javax.swing.table.DefaultTableModel(
                data,
                new String[] {
                        "Mã sản phẩm", "Sản phẩm", "Giá bán đã giảm", "Áp dụng"
                }) {
            Class[] types = new Class[] {
                    java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean[] {
                    false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        TableModel tableModelDSSPAPKM = jtbDSSPAPKM.getModel();
        tableModelDSSPAPKM.addTableModelListener(jtbDSSPADKMModelListener);
        revalidate();
    }

    public void setUpSearchSanPham() {
        jtfSanPhamSearch.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                JTextField source = (JTextField) e.getSource();
                String value = source.getText();
                bus.filteredDsSP(value);
                renderDSSP();
                jcheckboxAll.setSelected(false);
            }
        });
    }

    public void setUpHandleActionButton() {
        jbtnXacNhan.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int option = JOptionPane.showConfirmDialog(
                        dialog,
                        "Xác nhận áp dụng danh sách sản phẩm?",
                        "Thông báo xác nhận",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.INFORMATION_MESSAGE);
                if (option == JOptionPane.YES_OPTION) {
                    bus.changedDSSPADKM();
                    JOptionPane.showMessageDialog(
                            dialog,
                            "Đã áp dụng danh sách sản phẩm!",
                            "Thông báo xác nhận",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        jbtnHuy.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int option = JOptionPane.showConfirmDialog(
                        dialog,
                        "Khi hủy sẽ khôi phục trạng thái ban đầu của danh sách áp dụng. Xác nhận hủy?",
                        "Thông báo xác nhận",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.INFORMATION_MESSAGE);
                if (option == JOptionPane.YES_OPTION) {
                    bus.restoreDSSPADKM();
                    renderDSSP();
                    renderDSSPADKM();
                }
            }
        });
        jbtnThoat.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dialog.dispose();
            }
        });
        jbtnLamMoi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jtfSanPhamSearch.setText("");
                bus.filteredDsSP("");
                renderDSSP();
                jtfSanPhamSearch.requestFocus();
                jcheckboxAll.setSelected(false);
            }
        });
    }

    public void setUpCheckBoxAll() {
        jcheckboxAll.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jcheckboxAll.isSelected()) {
                    for (int i = 0; i < jtbDSSP.getRowCount(); i++) {
                        bus.checkedSanPham(i);
                    }
                } else {
                    for (int i = 0; i < jtbDSSP.getRowCount(); i++) {
                        bus.uncheckedSanPham(
                            (String)jtbDSSP.getValueAt(i, 0)
                        );
                    }
                }
                renderDSSP();
                renderDSSPADKM();
            }
        });
    }

    public void setUpHandleChangedValueOfColumnInTable() {
        jtbDSSPModelListener = new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int selectedRowIndex = jtbDSSP.getSelectedRow();
                if (selectedRowIndex != -1) {
                    int changedColumnIndex = e.getColumn();
                    if ((Boolean) jtbDSSP.getValueAt(selectedRowIndex, changedColumnIndex) == true) {
                        handleCheckedValue(selectedRowIndex);
                    } else {
                        handleUncheckedValue(jtbDSSP, selectedRowIndex);
                    }
                }

            }
        };

        jtbDSSPADKMModelListener = new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int selectedRowIndex = jtbDSSPAPKM.getSelectedRow();
                jtbDSSPAPKM.clearSelection();
                if (selectedRowIndex != -1) {
                    handleUncheckedValue(jtbDSSPAPKM, selectedRowIndex);
                }
            }
        };
    }

    public void handleCheckedValue(int row) {
        DefaultTableModel model = (DefaultTableModel) jtbDSSPAPKM.getModel();
        SanPham spchecked = bus.checkedSanPham(row);
        if (spchecked != null) {
            model.addRow(new Object[] { spchecked.getMaSP(), spchecked.getTenSP(), spchecked.getGiaBan(), true });
        }
    }

    public void handleUncheckedValue(JTable table, int row) {
        String masp;
        int index;
        if (table.equals(jtbDSSP)) {
            masp = (String) jtbDSSP.getValueAt(row, 0);
            index = bus.getIndexSanPhamInDSSPADKMByMasp(masp);
            if (index != -1) {
                bus.uncheckedSanPham(masp);
                this.removeRowOfTableDSSPADKM(index);
            }
        } else {
            masp = (String) jtbDSSPAPKM.getValueAt(row, 0);
            bus.uncheckedSanPham(masp);
            this.removeRowOfTableDSSPADKM(row);
            index = bus.getIndexSanPhamInDSSPByMasp(masp);
            if (index != -1) {
                jtbDSSP.setValueAt(false, index, 3);
            }
        }

    }

    public void removeRowOfTableDSSPADKM(int row) {
        DefaultTableModel model = (DefaultTableModel) jtbDSSPAPKM.getModel();
        model.removeRow(row);
    }
}
