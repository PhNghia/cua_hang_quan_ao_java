/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.stream.Collectors;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JTextFieldDateEditor;

import DTO.KhuyenMai;
import BUS.KhuyenMaiBUS;
import DTO.DotKhuyenMai;
import DTO.FormatValue;

/**
 *
 * @author BomPC
 */
public class KhuyenMaiGUI extends javax.swing.JPanel {

	/**
	 * Creates new form KhuyenMaiGUI
	 */
	private KhuyenMaiBUS KhuyenMaiBUS = new KhuyenMaiBUS();
	private List<Object> requiredFieldList = new ArrayList<>();
	private ArrayList<KhuyenMai> listCT;
	private String formStatus = "default";
	private String selectedStatus = "";
	private Date today = new Date();
	private int numDot = KhuyenMaiBUS.countDot();
	private javax.swing.table.DefaultTableModel model1, model2, model3;
	private List<List<Object>> resultSearch = new ArrayList<>();
	private List<List<Object>> resultSearchSP = new ArrayList<>();
	private JTextFieldDateEditor jtfBatDau;
	private JTextFieldDateEditor jtfKetThuc;
	private JTextFieldDateEditor jtfBatDauSearch;
	private JTextFieldDateEditor jtfKetThucSearch;

	public KhuyenMaiGUI(ArrayList<String> dsHanhDongCuaChucNang) {
		initComponents();
		jtfBatDau = (JTextFieldDateEditor) jdateBatDau.getDateEditor();
		jtfBatDau.setEnabled(false);
		jtfKetThuc = (JTextFieldDateEditor) jdateKetThuc.getDateEditor();
		jtfKetThuc.setEnabled(false);
		jtfBatDauSearch = (JTextFieldDateEditor) jdateBatDauSearch.getDateEditor();
		jtfBatDauSearch.setEnabled(false);
		jtfKetThucSearch = (JTextFieldDateEditor) jdateKetThucSearch.getDateEditor();
		jtfKetThucSearch.setEnabled(false);
		customComponents();
		selectTableEvent();
		listCT = KhuyenMaiBUS.getListKhuyenMai();
		setTableCT(listCT);
		defaultState();
		requiredFieldList.add(jdateBatDau);
		requiredFieldList.add(jdateKetThuc);
		requiredFieldList.add(jtfGiam);
		actionEvent();
		checkLegitForm();

		jbtnTao.setVisible(false);
		jbtnSua.setVisible(false);
        jbtnXoa.setVisible(false);
		jbtnApDung.setVisible(false);
		for (String hd : dsHanhDongCuaChucNang) {
			if (hd.toLowerCase().contains("thêm")) {
				jbtnTao.setVisible(true);
			} else if (hd.toLowerCase().contains("sửa")) {
				jbtnSua.setVisible(true);
			} else if (hd.toLowerCase().contains("xóa")) {
                jbtnXoa.setVisible(true);
            } else if (hd.toLowerCase().contains("áp")) {
				jbtnApDung.setVisible(true);
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jbtnTao = new javax.swing.JButton();
		jbtnSua = new javax.swing.JButton();
		jbtnApDung = new javax.swing.JButton();
		jtfKhuyenMaiSearch = new javax.swing.JTextField();
		jbtnTimKiem = new javax.swing.JButton();
		jlbStatusChuongTrinhSearch = new javax.swing.JLabel();
		jcbStatusChuongTrinhSearch = new javax.swing.JComboBox<>();
		jlbKhuyenMaiSearch = new javax.swing.JLabel();
		jlbThoiGianSearch = new javax.swing.JLabel();
		jdateBatDauSearch = new com.toedter.calendar.JDateChooser();
		jLabel10 = new javax.swing.JLabel();
		jdateKetThucSearch = new com.toedter.calendar.JDateChooser();
		jbtnLamMoiSearch = new javax.swing.JButton();
		jlbSanPhamSearch = new javax.swing.JLabel();
		jtfSanPhamSearch = new javax.swing.JTextField();
		jbtnXoa = new javax.swing.JButton();
		jpnFormKhuyenMai = new javax.swing.JPanel();
		jlbMaKhuyenMai = new javax.swing.JLabel();
		jtfMaKhuyenMai = new javax.swing.JTextField();
		jlbChuongTrinh = new javax.swing.JLabel();
		jtfChuongTrinh = new javax.swing.JTextField();
		jlbNgayBauDau = new javax.swing.JLabel();
		jdateBatDau = new com.toedter.calendar.JDateChooser();
		jlbNgayKetThuc = new javax.swing.JLabel();
		jdateKetThuc = new com.toedter.calendar.JDateChooser();
		jlbGiam = new javax.swing.JLabel();
		jlbStatusDotKhuyenMai = new javax.swing.JLabel();
		jtfGiam = new javax.swing.JTextField();
		jbtnXacNhan = new javax.swing.JButton();
		jbtnLamMoi = new javax.swing.JButton();
		jcbStatusDotKhuyenMai = new javax.swing.JComboBox<>();
		jbtnHuy = new javax.swing.JButton();
		jSeparator1 = new javax.swing.JSeparator();
		jLabel1 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		jPanel5 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jtbDSCTKM = new javax.swing.JTable();
		jPanel6 = new javax.swing.JPanel();
		jScrollPane2 = new javax.swing.JScrollPane();
		jtbDSDKM = new javax.swing.JTable();
		jPanel8 = new javax.swing.JPanel();
		jScrollPane3 = new javax.swing.JScrollPane();
		jtbDSSPAD = new javax.swing.JTable();

		setLayout(new java.awt.BorderLayout());

		jbtnTao.setText("Tạo khuyến mãi");

		jbtnSua.setText("Sửa khuyến mãi");

		jbtnApDung.setText("Chọn sản phẩm áp dụng");
		jbtnApDung.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbtnApDungActionPerformed(evt);
				int selectedRow = jtbDSDKM.getSelectedRow();
				int id = getTableDot(selectedRow);
				setTableSP(id, selectedRow);
			}
		});

		jbtnTimKiem.setText("Tìm kiếm");

		jlbStatusChuongTrinhSearch.setText("Trạng thái chương trình");

		jcbStatusChuongTrinhSearch.setModel(
				new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Chưa hoạt động", "Hoạt động" }));
		jcbStatusChuongTrinhSearch.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jcbStatusChuongTrinhSearchActionPerformed(evt);
			}
		});

		jlbKhuyenMaiSearch.setText("Khuyến mãi");

		jlbThoiGianSearch.setText("Thời gian từ");

		jLabel10.setText("đến");

		jbtnLamMoiSearch.setText("Làm mới");

		jlbSanPhamSearch.setText("Sản phẩm");

		jbtnXoa.setText("Xóa khuyến mãi");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanel1Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addGroup(jPanel1Layout.createSequentialGroup()
														.addComponent(jlbStatusChuongTrinhSearch)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jcbStatusChuongTrinhSearch,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGroup(jPanel1Layout.createSequentialGroup()
														.addComponent(jlbKhuyenMaiSearch)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(jtfKhuyenMaiSearch,
																javax.swing.GroupLayout.PREFERRED_SIZE, 161,
																javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGroup(jPanel1Layout.createSequentialGroup()
												.addComponent(jbtnTao)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jbtnSua)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jbtnXoa)))
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanel1Layout.createSequentialGroup()
												.addGap(16, 16, 16)
												.addGroup(jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jlbThoiGianSearch)
														.addComponent(jlbSanPhamSearch))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addGroup(jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,
																false)
														.addComponent(jtfSanPhamSearch,
																javax.swing.GroupLayout.PREFERRED_SIZE, 203,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGroup(jPanel1Layout.createSequentialGroup()
																.addComponent(jdateBatDauSearch,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jLabel10)))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
																jPanel1Layout.createSequentialGroup()
																		.addComponent(jbtnTimKiem)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jbtnLamMoiSearch))
														.addComponent(jdateKetThucSearch,
																javax.swing.GroupLayout.PREFERRED_SIZE, 177,
																javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGroup(jPanel1Layout.createSequentialGroup()
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jbtnApDung)))
								.addContainerGap(734, Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jbtnTao)
										.addComponent(jbtnSua)
										.addComponent(jbtnApDung, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jbtnXoa))
								.addGap(18, 18, 18)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jtfKhuyenMaiSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jlbKhuyenMaiSearch)
										.addComponent(jlbSanPhamSearch)
										.addComponent(jtfSanPhamSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jbtnTimKiem)
										.addComponent(jbtnLamMoiSearch))
								.addGap(18, 18, 18)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanel1Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jlbThoiGianSearch)
														.addComponent(jlbStatusChuongTrinhSearch)
														.addComponent(jcbStatusChuongTrinhSearch,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jLabel10))
												.addComponent(jdateKetThucSearch,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
										.addComponent(jdateBatDauSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap(14, Short.MAX_VALUE)));

		add(jPanel1, java.awt.BorderLayout.PAGE_START);

		jpnFormKhuyenMai.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin khuyến mãi"));
		jpnFormKhuyenMai.setPreferredSize(new java.awt.Dimension(924, 240));

		jlbMaKhuyenMai.setText("Mã khuyến mãi");

		jlbChuongTrinh.setText("Chương trình");

		jlbNgayBauDau.setText("Ngày bắt đầu");

		jlbNgayKetThuc.setText("Ngày kết thúc");

		jlbGiam.setText("Giảm (%)");

		jlbStatusDotKhuyenMai.setText("Trạng thái");

		jbtnXacNhan.setText("Xác nhận");

		jbtnLamMoi.setText("Làm mới");

		jcbStatusDotKhuyenMai.setModel(
				new javax.swing.DefaultComboBoxModel<>(new String[] { "Đã kết thúc", "Chưa diễn ra", "Đang diễn ra" }));

		jbtnHuy.setText("Hủy");

		jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

		jLabel1.setText("Thông tin đợt khuyến mãi");

		javax.swing.GroupLayout jpnFormKhuyenMaiLayout = new javax.swing.GroupLayout(jpnFormKhuyenMai);
		jpnFormKhuyenMai.setLayout(jpnFormKhuyenMaiLayout);
		jpnFormKhuyenMaiLayout.setHorizontalGroup(
				jpnFormKhuyenMaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jpnFormKhuyenMaiLayout.createSequentialGroup()
								.addContainerGap()
								.addGroup(jpnFormKhuyenMaiLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jpnFormKhuyenMaiLayout.createSequentialGroup()
												.addGroup(jpnFormKhuyenMaiLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(jpnFormKhuyenMaiLayout.createSequentialGroup()
																.addGap(358, 358, 358)
																.addGroup(jpnFormKhuyenMaiLayout.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																		.addGroup(jpnFormKhuyenMaiLayout
																				.createSequentialGroup()
																				.addComponent(jlbNgayBauDau,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						82,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addPreferredGap(
																						javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																				.addComponent(jdateBatDau,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						177,
																						javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGroup(jpnFormKhuyenMaiLayout
																				.createSequentialGroup()
																				.addComponent(jlbNgayKetThuc,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						82,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addPreferredGap(
																						javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																				.addComponent(jdateKetThuc,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						177,
																						javax.swing.GroupLayout.PREFERRED_SIZE))))
														.addGroup(jpnFormKhuyenMaiLayout.createSequentialGroup()
																.addGroup(jpnFormKhuyenMaiLayout.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING,
																		false)
																		.addComponent(jlbChuongTrinh,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addComponent(jlbMaKhuyenMai,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				92, Short.MAX_VALUE))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addGroup(jpnFormKhuyenMaiLayout.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING)
																		.addComponent(jtfMaKhuyenMai,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				181,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(jtfChuongTrinh,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				181,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
																.addGap(27, 27, 27)
																.addComponent(jSeparator1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jLabel1)))
												.addGap(100, 100, 100)
												.addGroup(jpnFormKhuyenMaiLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(jpnFormKhuyenMaiLayout.createSequentialGroup()
																.addComponent(jlbStatusDotKhuyenMai)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jcbStatusDotKhuyenMai,
																		javax.swing.GroupLayout.PREFERRED_SIZE, 150,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(jpnFormKhuyenMaiLayout.createSequentialGroup()
																.addComponent(jlbGiam)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(jtfGiam,
																		javax.swing.GroupLayout.PREFERRED_SIZE, 150,
																		javax.swing.GroupLayout.PREFERRED_SIZE))))
										.addGroup(jpnFormKhuyenMaiLayout.createSequentialGroup()
												.addComponent(jbtnXacNhan)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jbtnLamMoi)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jbtnHuy)))
								.addContainerGap(620, Short.MAX_VALUE)));
		jpnFormKhuyenMaiLayout.setVerticalGroup(
				jpnFormKhuyenMaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jpnFormKhuyenMaiLayout.createSequentialGroup()
								.addGap(0, 1, Short.MAX_VALUE)
								.addGroup(jpnFormKhuyenMaiLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnFormKhuyenMaiLayout
												.createSequentialGroup()
												.addGroup(jpnFormKhuyenMaiLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
														.addGroup(jpnFormKhuyenMaiLayout.createSequentialGroup()
																.addComponent(jLabel1)
																.addGap(18, 18, 18)
																.addGroup(jpnFormKhuyenMaiLayout.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING)
																		.addGroup(jpnFormKhuyenMaiLayout
																				.createParallelGroup(
																						javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(jlbGiam)
																				.addComponent(jtfGiam,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGroup(jpnFormKhuyenMaiLayout
																				.createParallelGroup(
																						javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(jlbMaKhuyenMai)
																				.addComponent(jtfMaKhuyenMai,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(jlbNgayBauDau))))
														.addComponent(jdateBatDau,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGap(18, 18, 18)
												.addGroup(jpnFormKhuyenMaiLayout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jlbStatusDotKhuyenMai)
														.addGroup(jpnFormKhuyenMaiLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(jtfChuongTrinh,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addComponent(jlbChuongTrinh)
																.addComponent(jlbNgayKetThuc)
																.addComponent(jcbStatusDotKhuyenMai,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
														.addComponent(jdateKetThuc,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING,
												javax.swing.GroupLayout.PREFERRED_SIZE, 77,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(24, 24, 24)
								.addGroup(jpnFormKhuyenMaiLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jbtnXacNhan)
										.addComponent(jbtnLamMoi)
										.addComponent(jbtnHuy))
								.addContainerGap(73, Short.MAX_VALUE)));

		add(jpnFormKhuyenMai, java.awt.BorderLayout.PAGE_END);

		jPanel3.setLayout(new java.awt.GridLayout(1, 3));

		jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Chương trình khuyến mãi"));
		jPanel5.setLayout(new java.awt.BorderLayout());

		jtbDSCTKM.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				},
				new String[] {
						"Mã khuyến mãi", "Tên khuyến mãi", "Trạng thái"
				}) {
			boolean[] canEdit = new boolean[] {
					false, false, false
			};

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane1.setViewportView(jtbDSCTKM);
		if (jtbDSCTKM.getColumnModel().getColumnCount() > 0) {
			jtbDSCTKM.getColumnModel().getColumn(0).setResizable(false);
			jtbDSCTKM.getColumnModel().getColumn(0).setPreferredWidth(80);
			jtbDSCTKM.getColumnModel().getColumn(1).setResizable(false);
			jtbDSCTKM.getColumnModel().getColumn(2).setResizable(false);
		}

		jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

		jPanel3.add(jPanel5);

		jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Đợt khuyến mãi"));
		jPanel6.setLayout(new java.awt.BorderLayout());

		jtbDSDKM.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				},
				new String[] {
						"ID", "Ngày bắt đầu", "Ngày kết thúc", "Giá trị", "Trạng thái"
				}) {
			boolean[] canEdit = new boolean[] {
					false, false, false, false, false
			};

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane2.setViewportView(jtbDSDKM);
		if (jtbDSDKM.getColumnModel().getColumnCount() > 0) {
			jtbDSDKM.getColumnModel().getColumn(0).setResizable(false);
			jtbDSDKM.getColumnModel().getColumn(1).setResizable(false);
			jtbDSDKM.getColumnModel().getColumn(2).setResizable(false);
			jtbDSDKM.getColumnModel().getColumn(3).setResizable(false);
			jtbDSDKM.getColumnModel().getColumn(4).setResizable(false);
		}

		jPanel6.add(jScrollPane2, java.awt.BorderLayout.CENTER);

		jPanel3.add(jPanel6);

		jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Sản phẩm áp dụng"));
		jPanel8.setLayout(new java.awt.BorderLayout());

		jtbDSSPAD.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				},
				new String[] {
						"Mã sản phẩm", "Tên sản phẩm"
				}) {
			boolean[] canEdit = new boolean[] {
					false, false
			};

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane3.setViewportView(jtbDSSPAD);
		if (jtbDSSPAD.getColumnModel().getColumnCount() > 0) {
			jtbDSSPAD.getColumnModel().getColumn(0).setResizable(false);
		}

		jPanel8.add(jScrollPane3, java.awt.BorderLayout.CENTER);

		jPanel3.add(jPanel8);

		add(jPanel3, java.awt.BorderLayout.CENTER);
	}// </editor-fold>

	private void jbtnApDungActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbtnApDungActionPerformed
		DotKhuyenMai selectedDKM = KhuyenMaiBUS
				.getDKMById(Integer.parseInt(jtbDSDKM.getValueAt(jtbDSDKM.getSelectedRow(), 0).toString()));
		if (selectedDKM.getTrangThai() == 0) {
			JOptionPane.showMessageDialog(
					null,
					"Đợt khuyến mãi đã kết thúc! Không thể áp dụng sản phẩm",
					"WARNING",
					JOptionPane.WARNING_MESSAGE);
			return;
		}
		JFrame topFrame = (JFrame) SwingUtilities.getAncestorOfClass(JFrame.class, (Component) evt.getSource());
		JDialog dialog = new JDialog(topFrame, JDialog.ModalityType.APPLICATION_MODAL);
		dialog.setTitle("Áp dụng sản phẩm khuyến mãi");
		dialog.setLayout(new BorderLayout(0, 0));
		dialog.setSize(1200, 800);
		dialog.add(new KhuyenMaiSanPhamApDungGUI(dialog, selectedDKM));
		dialog.setLocationRelativeTo(null);
		dialog.setVisible(true);
	}// GEN-LAST:event_jbtnApDungActionPerformed

	private void jcbStatusChuongTrinhSearchActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jcbStatusChuongTrinhSearchActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_jcbStatusChuongTrinhSearchActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel10;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel8;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JButton jbtnApDung;
	private javax.swing.JButton jbtnHuy;
	private javax.swing.JButton jbtnLamMoi;
	private javax.swing.JButton jbtnLamMoiSearch;
	private javax.swing.JButton jbtnSua;
	private javax.swing.JButton jbtnXoa;
	private javax.swing.JButton jbtnTao;
	private javax.swing.JButton jbtnTimKiem;
	private javax.swing.JButton jbtnXacNhan;
	private javax.swing.JComboBox<String> jcbStatusChuongTrinhSearch;
	private javax.swing.JComboBox<String> jcbStatusDotKhuyenMai;
	private com.toedter.calendar.JDateChooser jdateKetThuc;
	private com.toedter.calendar.JDateChooser jdateBatDauSearch;
	private com.toedter.calendar.JDateChooser jdateBatDau;
	private com.toedter.calendar.JDateChooser jdateKetThucSearch;
	private javax.swing.JLabel jlbChuongTrinh;
	private javax.swing.JLabel jlbGiam;
	private javax.swing.JLabel jlbKhuyenMaiSearch;
	private javax.swing.JLabel jlbMaKhuyenMai;
	private javax.swing.JLabel jlbNgayBauDau;
	private javax.swing.JLabel jlbNgayKetThuc;
	private javax.swing.JLabel jlbSanPhamSearch;
	private javax.swing.JLabel jlbStatusChuongTrinhSearch;
	private javax.swing.JLabel jlbStatusDotKhuyenMai;
	private javax.swing.JLabel jlbThoiGianSearch;
	private javax.swing.JPanel jpnFormKhuyenMai;
	private javax.swing.JTable jtbDSCTKM;
	private javax.swing.JTable jtbDSDKM;
	private javax.swing.JTable jtbDSSPAD;
	private javax.swing.JTextField jtfChuongTrinh;
	private javax.swing.JTextField jtfGiam;
	private javax.swing.JTextField jtfKhuyenMaiSearch;
	private javax.swing.JTextField jtfMaKhuyenMai;
	private javax.swing.JTextField jtfSanPhamSearch;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JLabel jLabel1;

	// End of variables declaration//GEN-END:variables

	public void customComponents() {
		jlbMaKhuyenMai.setText("Mã khuyến mãi*");
		jlbNgayBauDau.setText("Ngày bắt đầu*");
		jlbNgayKetThuc.setText("Ngày kết thúc*");
		jlbGiam.setText("Giảm* (%)");
		jtfBatDau = (JTextFieldDateEditor) jdateBatDau.getDateEditor();
		jtfBatDau.setEnabled(false);
		jtfKetThuc = (JTextFieldDateEditor) jdateKetThuc.getDateEditor();
		jtfKetThuc.setEnabled(false);
		jtfBatDauSearch = (JTextFieldDateEditor) jdateBatDau.getDateEditor();
		jtfBatDauSearch.setEnabled(false);
		jtfKetThucSearch = (JTextFieldDateEditor) jdateKetThuc.getDateEditor();
		jtfKetThucSearch.setEnabled(false);
		jcbStatusChuongTrinhSearch.setModel(
				new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Không hoạt động", "Đang hoạt động" }));
		jcbStatusDotKhuyenMai.setModel(
				new javax.swing.DefaultComboBoxModel<>(new String[] { "Đã kết thúc", "Chưa diễn ra", "Đang diễn ra" }));
		jdateBatDau.setCalendar(Calendar.getInstance());
		jdateKetThuc.setCalendar(Calendar.getInstance());
		jdateBatDauSearch.setDate(today);
		jdateKetThucSearch.setDate(today);
	}

	// SET FORM'S STATUS
	public boolean setFormStatus(JPanel panel, Boolean status) {
		for (Component cp : panel.getComponents()) {
			cp.setEnabled(status);
		}
		return status;
	}

	// CLEAR FORM
	public void clearFormCT() {
		jtfMaKhuyenMai.setText("");
		jtfChuongTrinh.setText("");

	}

	public void clearFormDot() {
		jdateBatDau.setCalendar(null);
		jdateKetThuc.setCalendar(null);
		jtfGiam.setText("");
		jcbStatusDotKhuyenMai.setSelectedIndex(0);
	}

	public void clearFormFilter() {
		jtfKhuyenMaiSearch.setText("");
		jtfSanPhamSearch.setText("");
		jdateBatDauSearch.setDate(today);
		jdateKetThucSearch.setDate(today);
		jcbStatusChuongTrinhSearch.setSelectedIndex(0);
	}

	// GET TABLE CHUONG TRINH
	public String getTableCT() {
		int selectedRow = jtbDSCTKM.getSelectedRow();
		String maCT = jtbDSCTKM.getValueAt(selectedRow, 0).toString();
		if (selectedRow != -1) {
			jtfMaKhuyenMai.setText(maCT);
			jtfChuongTrinh.setText(jtbDSCTKM.getValueAt(selectedRow, 1).toString());
		}
		return maCT;
	}

	// GET TABLE DOT - đổ bảng đợt xuống form
	public int getTableDot(int selectedRow) {
		int id = Integer.parseInt(jtbDSDKM.getValueAt(selectedRow, 0).toString());
		// convert localdatetime to date
		LocalDateTime batdau = LocalDateTime.parse(jtbDSDKM.getValueAt(selectedRow, 1).toString().replaceAll(" ", "T"));
		LocalDateTime ketthuc = LocalDateTime
				.parse(jtbDSDKM.getValueAt(selectedRow, 2).toString().replaceAll(" ", "T"));
		Date bd = Date.from(batdau.atZone(ZoneId.systemDefault()).toInstant());
		Date kt = Date.from(ketthuc.atZone(ZoneId.systemDefault()).toInstant());
		if (selectedRow != -1) {
			jdateBatDau.setDate(bd);
			jdateKetThuc.setDate(kt);
		}
		jtfGiam.setText(jtbDSDKM.getValueAt(selectedRow, 3).toString());
		jcbStatusDotKhuyenMai.setSelectedItem(jtbDSDKM.getValueAt(selectedRow, 4).toString());

		return id;
	}

	// SET TABLE CHUONG TRINH
	public void setTableCT(ArrayList<KhuyenMai> listCT) {
		String[][] data = new String[listCT.size()][3];
		int i = 0;
		for (KhuyenMai km : listCT) {
			data[i][0] = km.getMakm();
			data[i][1] = km.getTenkm();
			if (KhuyenMaiBUS.checkStatusCT(km.getMakm()))
				data[i][2] = "Đang hoạt động";
			else
				data[i][2] = km.getTrangThaiText();
			i++;
		}

		jtbDSCTKM.setModel(new javax.swing.table.DefaultTableModel(
				data,
				new String[] {
						"Mã khuyến mãi", "Tên khuyến mãi", "Trạng thái"
				}) {
			boolean[] canEdit = new boolean[] {
					false, false, false
			};

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
	}

	// SET TABLE DOT
	public void setTableDot(String maCT) {
		ArrayList<DotKhuyenMai> dotList = this.KhuyenMaiBUS.getListDot(maCT);
		String[][] data = new String[dotList.size()][5];
		int i = 0;
		for (DotKhuyenMai dot : dotList) {
			data[i][0] = dot.getIdDotKm() + "";
			data[i][1] = dot.getNgayBatDau().toString().replaceAll("T", " ");
			data[i][2] = dot.getNgayKetThuc().toString().replaceAll("T", " ");
			data[i][3] = dot.getGiaTri() + "";
			data[i][4] = dot.getTrangThaiText();
			i++;
		}
		jtbDSDKM.setModel(new javax.swing.table.DefaultTableModel(
				data,
				new String[] {
						"ID", "Ngày bắt đầu", "Ngày kết thúc", "Giá trị", "Trạng thái"
				}) {
			boolean[] canEdit = new boolean[] {
					false, false, false, false, false
			};

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
	}

	public void setTableDot(List<List<Object>> listDotSearch) {
		String maCT = jtfMaKhuyenMai.getText();
		String[][] data = new String[listDotSearch.get(0).size()][5];
		int index = 0;
		for (int i = 0; i < listDotSearch.get(0).size(); i++) {
			if (listDotSearch.get(0).get(i).toString().equals(maCT)) {
				data[index][0] = listDotSearch.get(1).get(i).toString();
				data[index][1] = listDotSearch.get(2).get(i).toString();
				data[index][2] = listDotSearch.get(3).get(i).toString();
				data[index][3] = listDotSearch.get(4).get(i).toString();
				String trangthai = "";
				int status = (Integer) listDotSearch.get(5).get(i);
				switch (status) {
					case 0:
						trangthai = "Đã kết thúc";
						break;
					case 1:
						trangthai = "Chưa diễn ra";
						break;
					case 2:
						trangthai = "Đang diễn ra";
						break;
				}
				data[index][4] = trangthai;
				index++;
			}
		}
		jtbDSDKM.setModel(new javax.swing.table.DefaultTableModel(
				data,
				new String[] {
						"ID", "Ngày bắt đầu", "Ngày kết thúc", "Giá trị", "Trạng thái"
				}) {
			boolean[] canEdit = new boolean[] {
					false, false, false, false, false
			};

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
	}

	// SET TABLE SANPHAM
	public void setTableSP(int maDot, int selectedRow) {
		int id = getTableDot(selectedRow);
		List<List<String>> listSP = KhuyenMaiBUS.getListSP(id);
		String[][] data = new String[listSP.get(0).size()][2];
		for (int i = 0; i < listSP.get(0).size(); i++) {
			data[i][0] = listSP.get(0).get(i);
			data[i][1] = listSP.get(1).get(i);
		}
		jtbDSSPAD.setModel(new javax.swing.table.DefaultTableModel(
				data,
				new String[] {
						"Mã sản phẩm", "Tên sản phẩm"
				}) {
			boolean[] canEdit = new boolean[] {
					false, false
			};

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
	}

	public void setTableSP(int selectedRow, List<List<Object>> listSPSearch) {
		int id = getTableDot(selectedRow);
		String[][] data = new String[listSPSearch.get(0).size()][2];
		int index = 0;
		for (int i = 0; i < listSPSearch.get(0).size(); i++) {
			if (Integer.parseInt(listSPSearch.get(0).get(i).toString()) == id) {
				data[index][0] = listSPSearch.get(1).get(i).toString();
				data[index][1] = listSPSearch.get(2).get(i).toString();
				index++;
			}
		}
		jtbDSSPAD.setModel(new javax.swing.table.DefaultTableModel(
				data,
				new String[] {
						"Mã sản phẩm", "Tên sản phẩm"
				}) {
			boolean[] canEdit = new boolean[] {
					false, false
			};

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
	}

	// CLEAR TABLE
	public void clearTable(JTable table) {
		int size = table.getRowCount();
		for (int i = size - 1; i >= 0; i--) {
			((DefaultTableModel) table.getModel()).removeRow(i);
		}
	}

	// GET FORM CHUONG TRINH
	public KhuyenMai getCTForm() {
		String maKM = jtfMaKhuyenMai.getText().toUpperCase();
		String tenKM = jtfChuongTrinh.getText();
		if (KhuyenMaiBUS.checkDuplicate(maKM, jtbDSCTKM)) {
			KhuyenMai sp = new KhuyenMai(maKM, tenKM);
			return sp;
		}
		return null;
	}

	// GET FORM DOT - lấy dotkhuyenmai từ form đợt
	public DotKhuyenMai getDotForm(ArrayList<KhuyenMai> listKM, int selectedRow) {
		int id = numDot + 1;
		int index = selectedRow;
		KhuyenMai km = listKM.get(index);
		// convert date to localdatetime
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		String batdau = df.format(jdateBatDau.getDate()) + "T00:00";
		String ketthuc = df.format(jdateKetThuc.getDate()) + "T23:59";
		LocalDateTime bd = LocalDateTime.parse(batdau);
		LocalDateTime kt = LocalDateTime.parse(ketthuc);
		float giaTri = Float.parseFloat(jtfGiam.getText());
		int trangThai = jcbStatusDotKhuyenMai.getSelectedIndex();
		DotKhuyenMai dot = new DotKhuyenMai(id, km, bd, kt, giaTri, trangThai);
		return dot;
	}

	public DotKhuyenMai getDotForm(int selectedID) {
		int id = selectedID;
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		String batdau = df.format(jdateBatDau.getDate()) + "T00:00";
		String ketthuc = df.format(jdateKetThuc.getDate()) + "T23:59";
		LocalDateTime bd = LocalDateTime.parse(batdau);
		LocalDateTime kt = LocalDateTime.parse(ketthuc);
		float giaTri = Float.parseFloat(jtfGiam.getText());
		int trangThai = jcbStatusDotKhuyenMai.getSelectedIndex();
		DotKhuyenMai dot = new DotKhuyenMai(id, bd, kt, giaTri, trangThai);
		return dot;
	}

	// GET FILTER FORM
	public ArrayList<String> getFilterForm() {
		ArrayList<String> filterForm = new ArrayList<>();
		String km = jtfKhuyenMaiSearch.getText();
		String sp = jtfSanPhamSearch.getText();
		// convert date to localdatetime
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		String bd = df.format(jdateBatDauSearch.getDate()) + " 00:00:00";
		String kt = df.format(jdateKetThucSearch.getDate()) + " 23:59:00";
		String status = jcbStatusChuongTrinhSearch.getSelectedItem().toString();
		filterForm.add(km);
		filterForm.add(sp);
		filterForm.add(bd);
		filterForm.add(kt);
		filterForm.add(status);
		return filterForm;
	}

	// GET DOT DATE - lấy ds date trên bảng đợt (ktra trùng)
	public ArrayList<DotKhuyenMai> getListDate() {
		int row = jtbDSCTKM.getSelectedRow();
		if (row == -1) {
			return null;
		}
		ArrayList<DotKhuyenMai> listDate = KhuyenMaiBUS.getListDot(jtbDSCTKM.getValueAt(row, 0).toString());
		// for (DotKhuyenMai d : listDate) {
		// System.out.println(d.getIdDotKm() + " " + d.getNgayBatDau() + " " +
		// d.getNgayKetThuc());
		// }
		return listDate;
	}

	public void defaultState() {
		clearFormCT();
		clearFormDot();
		jtbDSDKM.setEnabled(true);
		formStatus = "default";
		setFormStatus(jpnFormKhuyenMai, false);
		jbtnTimKiem.setEnabled(true);
		jbtnTao.setEnabled(true);
		jbtnSua.setEnabled(true);
		jbtnXoa.setEnabled(false);
		jbtnApDung.setEnabled(false);
		clearTable(jtbDSSPAD);
		jbtnXacNhan.setText("Xác nhận");
		jtfBatDau = (JTextFieldDateEditor) jdateBatDau.getDateEditor();
		jtfBatDau.setEnabled(false);
		jtfKetThuc = (JTextFieldDateEditor) jdateKetThuc.getDateEditor();
		jtfKetThuc.setEnabled(false);
		jpnFormKhuyenMai.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin khuyến mãi:"));
	}

	public void addCTState() {
		clearFormCT();
		clearFormDot();
		formStatus = "addCT";
		// setTableCT(listCT);
		clearTable(jtbDSDKM);
		clearTable(jtbDSSPAD);
		setFormStatus(jpnFormKhuyenMai, true);
		jbtnTimKiem.setEnabled(false);
		jbtnSua.setEnabled(false);
		jbtnHuy.setEnabled(true);
		jbtnLamMoi.setEnabled(true);
		jbtnXacNhan.setEnabled(false);
		jbtnXacNhan.setText("Xác nhận chương trình");
		jbtnXoa.setEnabled(false);
		jpnFormKhuyenMai.setBorder(javax.swing.BorderFactory.createTitledBorder("Tạo khuyến mãi mới:"));
		jdateBatDau.setEnabled(false); // lock form dot
		jdateKetThuc.setEnabled(false);
		jtfGiam.setEnabled(false);
		jcbStatusDotKhuyenMai.setEnabled(false);
		jtfBatDau = (JTextFieldDateEditor) jdateBatDau.getDateEditor();
		jtfBatDau.setEnabled(false);
		jtfKetThuc = (JTextFieldDateEditor) jdateKetThuc.getDateEditor();
		jtfKetThuc.setEnabled(false);
		jcbStatusDotKhuyenMai.setEnabled(false);
		checkRequiredFieldCT();
	}

	public void addDotState() {
		clearFormDot();
		formStatus = "addDot";
		jbtnXacNhan.setEnabled(false);
		jtfMaKhuyenMai.setEnabled(false);
		jtfChuongTrinh.setEnabled(false);
		jbtnTimKiem.setEnabled(false);
		jdateBatDau.setEnabled(true);
		jdateKetThuc.setEnabled(true);
		jtfGiam.setEnabled(true);
		jcbStatusDotKhuyenMai.setEnabled(true);
		jpnFormKhuyenMai.setBorder(javax.swing.BorderFactory.createTitledBorder("Tạo đợt mới:"));
		checkRequiredFieldDot();
		jcbStatusDotKhuyenMai.setEnabled(false);
		jtfBatDau = (JTextFieldDateEditor) jdateBatDau.getDateEditor();
		jtfBatDau.setEnabled(false);
		jtfKetThuc = (JTextFieldDateEditor) jdateKetThuc.getDateEditor();
		jtfKetThuc.setEnabled(false);
		jcbStatusDotKhuyenMai.setEnabled(false);
		jbtnXacNhan.setText("Xác nhận đợt");
	}

	public void editCTState() {
		clearFormCT();
		clearFormDot();
		// setTableCT(listCT);
		formStatus = "editCT";
		jbtnTao.setEnabled(false);
		jbtnXoa.setEnabled(false);
		clearTable(jtbDSDKM);
		clearTable(jtbDSSPAD);
		jbtnTimKiem.setEnabled(false);
		setFormStatus(jpnFormKhuyenMai, true);
		jbtnXacNhan.setEnabled(false);
		jbtnXacNhan.setText("Xác nhận chương trình");
		jtfMaKhuyenMai.setEnabled(false);
		jtfChuongTrinh.setEnabled(false);
		jdateBatDau.setEnabled(false); // lock form dot
		jdateKetThuc.setEnabled(false);
		jtfGiam.setEnabled(false);
		jcbStatusDotKhuyenMai.setEnabled(false);
		jtfBatDau = (JTextFieldDateEditor) jdateBatDau.getDateEditor();
		jtfBatDau.setEnabled(false);
		jtfKetThuc = (JTextFieldDateEditor) jdateKetThuc.getDateEditor();
		jtfKetThuc.setEnabled(false);
		jpnFormKhuyenMai.setBorder(javax.swing.BorderFactory.createTitledBorder("Sửa chương trình:"));
		checkRequiredFieldCT();
	}

	public void editDotState() {
		formStatus = "editDot";
		clearTable(jtbDSSPAD);
		jbtnXacNhan.setEnabled(false);
		jbtnLamMoi.setEnabled(true);
		jbtnHuy.setEnabled(true);
		jbtnTimKiem.setEnabled(false);
		jbtnXoa.setEnabled(false);
		jtfMaKhuyenMai.setEnabled(false); // lock form CT
		jtfChuongTrinh.setEnabled(false);
		jdateBatDau.setEnabled(true);
		jdateKetThuc.setEnabled(true);
		jtfGiam.setEnabled(false);
		jcbStatusDotKhuyenMai.setEnabled(false);
		jtfBatDau = (JTextFieldDateEditor) jdateBatDau.getDateEditor();
		jtfBatDau.setEnabled(false);
		jtfKetThuc = (JTextFieldDateEditor) jdateKetThuc.getDateEditor();
		jtfKetThuc.setEnabled(false);
		jpnFormKhuyenMai.setBorder(javax.swing.BorderFactory.createTitledBorder("Sửa đợt:"));
		jcbStatusDotKhuyenMai.setEnabled(false);
		jbtnXacNhan.setText("Xác nhận đợt");
		checkRequiredFieldDot();
	}

	public void setTrangThaiDot() {
		if (!jtfBatDau.getText().isEmpty() && !jtfKetThuc.getText().isEmpty()) {
			if (jdateKetThuc.getDate().before(today)) {
				jcbStatusDotKhuyenMai.setSelectedIndex(0);
			} else if (jdateBatDau.getDate().after(today)) {
				jcbStatusDotKhuyenMai.setSelectedIndex(1);
			} else
				jcbStatusDotKhuyenMai.setSelectedIndex(2);
		}
	}

	public void checkRequiredFieldCT() {
		// CHECK FORM CT
		jtfMaKhuyenMai.getDocument().addDocumentListener(new DocumentListener() {
			public void changedUpdate(DocumentEvent e) {
			}

			public void removeUpdate(DocumentEvent e) {
				Boolean canEnable = true;
				if (jtfMaKhuyenMai.getText().isEmpty())
					canEnable = false;
				if (state())
					jbtnXacNhan.setEnabled(canEnable);
				else
					jbtnXacNhan.setEnabled(false);
			}

			public void insertUpdate(DocumentEvent e) {
				Boolean canEnable = true;
				if (jtfMaKhuyenMai.getText().isEmpty())
					canEnable = false;
				if (state())
					jbtnXacNhan.setEnabled(canEnable);
				else
					jbtnXacNhan.setEnabled(false);
			}

			public Boolean state() {
				Boolean state = false;
				if (formStatus.equals("addCT") || formStatus.equals("editCT"))
					state = true;
				return state;
			}
		});
	}

	public void checkRequiredFieldDot() {
		// CHECK FORM DOT
		DocumentListener addListener = new DocumentListener() {
			@Override
			public void removeUpdate(DocumentEvent e) {
				changedUpdate(e);
			}

			@Override
			public void insertUpdate(DocumentEvent e) {
				changedUpdate(e);
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				boolean canEnable = true;
				for (Object field : requiredFieldList) {
					if (field instanceof JDateChooser)
						if (((JDateChooser) field).getDate() == null)
							canEnable = false;
					if (field instanceof JTextField) {
						if (((JTextField) field).getText().isEmpty())
							canEnable = false;
						if (((JTextField) field).equals(jtfGiam)) {
							canEnable = checkJtfGiam() == false ? false : canEnable;
						}
					}
				}
				if (formStatus.equals("addDot") || formStatus.equals("editDot"))
					jbtnXacNhan.setEnabled(canEnable);
				else
					jbtnXacNhan.setEnabled(false);
				setTrangThaiDot();
			}
		};
		JTextFieldDateEditor jtfBatDau = (JTextFieldDateEditor) jdateBatDau.getDateEditor();
		JTextFieldDateEditor jtfKetThuc = (JTextFieldDateEditor) jdateKetThuc.getDateEditor();
		jtfBatDau.getDocument().addDocumentListener(addListener);
		jtfKetThuc.getDocument().addDocumentListener(addListener);
		jtfGiam.getDocument().addDocumentListener(addListener);
	}

	public void checkLegitForm() {
		// CHECK FORM CT

		jtfMaKhuyenMai.addFocusListener(new FocusListener() {
			@Override
			public void focusGained(FocusEvent e) {
			}

			@Override
			public void focusLost(FocusEvent e) {
				Boolean flag = true;
				String check = jtfMaKhuyenMai.getText().trim();
				// CHECK ADD CT
				if (formStatus.equals("addCT")) {
					for (int i = 0; i < listCT.size(); i++) {
						if (listCT.get(i).getMakm().equalsIgnoreCase(check))
							flag = false;
					}
				}
				if (formStatus.equals("editCT")) {
					int selectedRow = jtbDSCTKM.getSelectedRow();
					String currentMa = jtbDSCTKM.getValueAt(selectedRow, 0).toString();

					for (int i = 0; i < listCT.size(); i++) {
						if (listCT.get(i).getMakm().equalsIgnoreCase(check))
							if (listCT.get(i).getMakm().equalsIgnoreCase(currentMa))
								flag = true;
							else
								flag = false;
					}
				}

				if (!flag) {
					JOptionPane.showMessageDialog(null, "Mã bị trùng, hãy đổi mã khác!", "WARNING",
							JOptionPane.ERROR_MESSAGE);
					jtfMaKhuyenMai.requestFocus();
				}

			}
		});

		// CHECK FORM DOT

		jtfGiam.addFocusListener(new FocusListener() {
			@Override
			public void focusGained(FocusEvent e) {
			}

			@Override
			public void focusLost(FocusEvent e) {
				try {
					Float.parseFloat(jtfGiam.getText());
					float check = Float.parseFloat(jtfGiam.getText());
					if (check <= 0 || check > 100) {
						JOptionPane.showMessageDialog(null, "Giá trị nằm ngoài khoảng cho phép!", "WARNING",
								JOptionPane.ERROR_MESSAGE);
						jtfGiam.requestFocus();
						return;
					}

				} catch (Exception convertError) {
					if (!(jtfGiam.getText().isEmpty())) {
						JOptionPane.showMessageDialog(null, "Giá trị không hợp lệ!", "WARNING",
								JOptionPane.ERROR_MESSAGE);
						jtfGiam.requestFocus();
						return;
					}
				}

			}
		});

	}

	public boolean checkJtfGiam() {
		try {
			Float.parseFloat(jtfGiam.getText());
			float check = Float.parseFloat(jtfGiam.getText());
			if (check <= 0 || check > 100) {
				return false;
			}
		} catch (Exception convertError) {
			if (!(jtfGiam.getText().isEmpty())) {
				return false;
			}
		}
		return true;
	}

	public Boolean checkValidDate() {
		// CHECK VALID DATE
		Boolean flag = true;
		Boolean intersect = false;

		Date batdau = defaultTime(jdateBatDau.getDate(), true);
		Date ketthuc = defaultTime(jdateKetThuc.getDate(), false);

		// if (formStatus.equals("addDot")) {
		// ngày bắt đầu < ngày kết thúc
		if (ketthuc.before(batdau)) {
			JOptionPane.showMessageDialog(null, "Ngày bắt đầu phải trước ngày kết thúc!", "WARNING",
					JOptionPane.ERROR_MESSAGE);
			flag = false;
			return flag;
		}
		// không tạo đợt trong quá khứ
		if ((batdau.before(defaultTime(new Date(), true))) && (ketthuc.before(defaultTime(new Date(), true)))) {
			JOptionPane.showMessageDialog(null, "Ngày đợt đã cũ!", "WARNING", JOptionPane.ERROR_MESSAGE);
			flag = false;
			return flag;
		}
		// không trùng đợt
		ArrayList<DotKhuyenMai> listDate = getListDate();
		if (formStatus.equals("editDot")) {
			for (int i = 0; i < listDate.size(); i++) {
				if (listDate.get(i).getIdDotKm() == Integer
						.parseInt(jtbDSDKM.getValueAt(jtbDSDKM.getSelectedRow(), 0).toString())) {
					continue;
				}
				Date ibd = FormatValue.convertLocalDateTimeToDate(listDate.get(i).getNgayBatDau());
				Date ikt = FormatValue.convertLocalDateTimeToDate(listDate.get(i).getNgayKetThuc());
				if (listDate.get(i).getTrangThaiText().equals("Đã kết thúc")) {
					continue;
				}
				if ((!batdau.before(ibd) && !batdau.after(ikt)) || (!ketthuc.before(ibd) && !ketthuc.after(ikt))) {
					intersect = true;
				}
				if (intersect) {
					break;
				}
			}
		} else {
			for (int i = 0; i < listDate.size(); i++) {
				Date ibd = FormatValue.convertLocalDateTimeToDate(listDate.get(i).getNgayBatDau());
				Date ikt = FormatValue.convertLocalDateTimeToDate(listDate.get(i).getNgayKetThuc());
				if (listDate.get(i).getTrangThaiText().equals("Đã kết thúc")) {
					continue;
				}
				if ((!batdau.before(ibd) && !batdau.after(ikt)) || (!ketthuc.before(ibd) && !ketthuc.after(ikt))) {
					intersect = true;
				}
				if (intersect) {
					break;
				}
			}
		}

		if (intersect) {
			JOptionPane.showMessageDialog(null, "Đợt bị trùng!", "WARNING", JOptionPane.ERROR_MESSAGE);
			flag = false;
			return flag;
		}

		// DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		// String bd = df.format(jdateBatDau.getDate()).toString();
		// String kt = df.format(jdateKetThuc.getDate()).toString();
		// if (bd.equals(listDate.get(0).get(i)) && kt.equals(listDate.get(1).get(i))) {
		// JOptionPane.showMessageDialog(null, "Đợt bị trùng!", "WARNING",
		// JOptionPane.ERROR_MESSAGE);
		// flag = false;
		//// break;
		//// }
		// }
		// }
		// if (formStatus.equals("editDot")) {
		// if (jdateKetThuc.getDate().before(jdateBatDau.getDate())) {
		// JOptionPane.showMessageDialog(null, "Ngày bắt đầu phải trước ngày kết thúc!",
		// "WARNING",
		// JOptionPane.ERROR_MESSAGE);
		// flag = false;
		// }
		//
		// if (jdateBatDau.getDate().before(today)) {
		// JOptionPane.showMessageDialog(null, "Ngày đợt đã cũ!", "WARNING",
		// JOptionPane.ERROR_MESSAGE);
		// flag = false;
		// old = true;
		// }
		// }
		return flag;
	}

	public Date defaultTime(Date date, boolean bd) {
		String dateString = FormatValue.converDateToLocalDateTime(date).toString();
		LocalDateTime localDateTime;
		if (bd) {
			dateString = dateString.substring(0, dateString.indexOf("T") + 1) + "00:00:00";
		} else {
			dateString = dateString.substring(0, dateString.indexOf("T") + 1) + "23:59:00";
		}
		localDateTime = LocalDateTime.parse(dateString);
		return FormatValue.convertLocalDateTimeToDate(localDateTime);
	}

	public void removeListener(JButton btn) {
		for (ActionListener act : btn.getActionListeners()) {
			btn.removeActionListener(act);
		}
	}

	public void deleteState() {
		jbtnXoa.setEnabled(true);
		// jbtnXoa.addActionListener(new ActionListener() {
		// public void actionPerformed(ActionEvent e) {
		// if (selectedStatus.equals("ct")) {
		// // DELETE IN DTB
		// int selectedRow = jtbDSCTKM.getSelectedRow();
		// KhuyenMai selected = listCT.get(selectedRow);
		// KhuyenMaiBUS.deleteCT(selected);
		// // UPDATE TO TABLE
		// listCT = KhuyenMaiBUS.getListKhuyenMai();
		// setTableCT(listCT);
		// int lastRowIndex = model1.getRowCount() - 1;
		// if (lastRowIndex >= 0) {
		// jtbDSDKM.setRowSelectionInterval(lastRowIndex, lastRowIndex);
		// jtbDSDKM.scrollRectToVisible(jtbDSCTKM.getCellRect(lastRowIndex, 0, true));
		// }
		// removeListener(jbtnXoa);
		// }
		// else if (selectedStatus.equals("dot")) {
		// int selectedRow = jtbDSDKM.getSelectedRow();
		// int id = Integer.parseInt(jtbDSDKM.getModel().getValueAt(selectedRow,
		// 0).toString());
		// KhuyenMaiBUS.deleteDot(id);
		//
		// // UPDATE TO TABLE
		// setTableDot(jtfMaKhuyenMai.getText());
		// clearTable(jtbDSSPAD, model3);
		// int lastRowIndex = model2.getRowCount() - 1;
		// if (lastRowIndex >= 0) {
		// jtbDSDKM.setRowSelectionInterval(lastRowIndex, lastRowIndex);
		// jtbDSDKM.scrollRectToVisible(jtbDSCTKM.getCellRect(lastRowIndex, 0, true));
		// }
		// numDot = KhuyenMaiBUS.countDot();
		// removeListener(jbtnXoa);
		// }
		//
		// }
		// });

	}

	public void selectTableEvent() {
		ListSelectionModel selectModel1 = jtbDSCTKM.getSelectionModel();
		selectModel1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		selectModel1.addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				int selectedRowIndex = jtbDSCTKM.getSelectedRow();
				if (selectedRowIndex != -1) {
					String mact = jtbDSCTKM.getValueAt(selectedRowIndex, 0).toString();
					// select in default state
					clearTable(jtbDSSPAD);
					if (formStatus.equals("default")) {
						getTableCT();
						setTableDot(mact);
						// XOA CT STATE
						selectedStatus = "ct";
						deleteState();
					}
					if (formStatus.equals("addCT") || formStatus.equals("addDot")) {
						addDotState();
						getTableCT();
						jtbDSDKM.setEnabled(false);
						setTableDot(mact);
					}
					if (formStatus.equals("editCT")) {
						getTableCT();
						setTableDot(mact);
						jtfMaKhuyenMai.setEnabled(true);
						jtfChuongTrinh.setEnabled(true);
					}

					if (formStatus.equals("search")) {
						getTableCT();
						setTableDot(resultSearch);
					}
				}

			}
		});

		ListSelectionModel selectModel2 = jtbDSDKM.getSelectionModel();
		selectModel2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		selectModel2.addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				int selectedRowIndex = jtbDSDKM.getSelectedRow();
				setTrangThaiDot();
				if (selectedRowIndex != -1) {
					jbtnApDung.setEnabled(true);
					if (formStatus.equals("editCT") || formStatus.equals("editDot")) {
						editDotState();
						if (jtbDSDKM.getValueAt(selectedRowIndex, 4).toString().contains("kết thúc")) {
							closeEditDotForm();
						} else if (jtbDSDKM.getValueAt(selectedRowIndex, 4).toString().contains("Đang")) {
							openEditDotForm();
							jtfGiam.setEnabled(false);
						} else {
							openEditDotForm();
						}
					}

					if (!formStatus.equals("search")) {
						int selectedRow = jtbDSDKM.getSelectedRow();
						int id = getTableDot(selectedRow);
						setTableSP(id, selectedRow);
						// DELETE DOT
						selectedStatus = "dot";
						deleteState();
					} else if (formStatus.equals("search")) {
						int selectedRow = jtbDSDKM.getSelectedRow();
						setTableSP(selectedRow, resultSearchSP);
					}
				} else {
					jbtnApDung.setEnabled(false);
				}
			}
		});

	}

	public void closeEditDotForm() {
		jtfGiam.setEnabled(false);
		jcbStatusDotKhuyenMai.setEnabled(false);
		jdateBatDau.setEnabled(false);
		jdateKetThuc.setEnabled(false);
	}

	public void openEditDotForm() {
		jtfGiam.setEnabled(true);
		jcbStatusDotKhuyenMai.setEnabled(false);
		jdateBatDau.setEnabled(true);
		jdateKetThuc.setEnabled(true);
		jtfBatDau.setEnabled(false);
		jtfKetThuc.setEnabled(false);
	}

	public void actionEvent() {

		// ADD CT STATE
		jbtnTao.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addCTState();
			}
		});

		jbtnXacNhan.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (formStatus.equals("addCT")) {
					// Boolean flag = checkValidDate();
					// if (!flag) {
					// jbtnXacNhan.setEnabled(false);
					// clearFormDot();
					// }
					// ADD TO DTB khuyen_mai
					KhuyenMai km = getCTForm();
					if (km == null) {
						return;
					}
					KhuyenMaiBUS.insertNewCT(km);
					// ADD TO TABLE CT
					listCT = KhuyenMaiBUS.getListKhuyenMai();
					setTableCT(listCT);
					// clear form
					clearFormCT();
					// defaultState();
				} else if (formStatus.equals("addDot")) {
					// CHECK VALID DATE
					Boolean flag = checkValidDate();
					if (!flag) {
						// jbtnXacNhan.setEnabled(false);
						// clearFormDot();
					} else {
						// ADD TO DTB dot_khuyen_mai
						int selectedRow = jtbDSCTKM.getSelectedRow();
						DotKhuyenMai dotMoi = getDotForm(listCT, selectedRow);
						if (dotMoi == null) {
							jtfGiam.requestFocus();
							return;
						}
						KhuyenMaiBUS.insertNewDot(dotMoi);
						numDot = KhuyenMaiBUS.countDot();
						// ADD TO TABLE DOT
						setTableDot(jtfMaKhuyenMai.getText());
						clearFormDot();
					}
					// setTableCT(listCT);
				} else if (formStatus.equals("editCT")) {

					// UPDATE TO DTB khuyen_mai AND dot_khuyen_mai
					int selectedRow = jtbDSCTKM.getSelectedRow();
					String selected = listCT.get(selectedRow).getMakm();
					KhuyenMai update = getCTForm();
					if (update == null) {
						return;
					}
					KhuyenMaiBUS.updateCT(selected, update);
					// UPDATE TO TABLE
					listCT = KhuyenMaiBUS.getListKhuyenMai();
					setTableCT(listCT);
					// int lastRowIndex = model1.getRowCount() - 1;
					// if (lastRowIndex >= 0) {
					// jtbDSCTKM.setRowSelectionInterval(lastRowIndex, lastRowIndex);
					// jtbDSCTKM.scrollRectToVisible(jtbDSCTKM.getCellRect(lastRowIndex, 0, true));
					// }

				} else if (formStatus.equals("editDot")) {
					// CHECK VALID DATE
					Boolean flag = checkValidDate();
					if (!flag) {
						jbtnXacNhan.setEnabled(false);
						clearFormDot();
					}

					else {
						// UPDATE TO DTB dot_khuyen_mai AND chi_tiet_khuyen_mai
						int selectedRow = jtbDSDKM.getSelectedRow();
						int id = Integer.parseInt(jtbDSDKM.getModel().getValueAt(selectedRow, 0).toString());
						DotKhuyenMai update = getDotForm(id);
						KhuyenMaiBUS.updateDot(update);
						// UPDATE TO TABLE
						setTableDot(jtfMaKhuyenMai.getText());
						// int lastRowIndex = model2.getRowCount() - 1;
						// if (lastRowIndex >= 0) {
						// jtbDSDKM.setRowSelectionInterval(lastRowIndex, lastRowIndex);
						// jtbDSDKM.scrollRectToVisible(jtbDSDKM.getCellRect(lastRowIndex, 0, true));
						// }
					}
					setTableCT(listCT);
					clearFormDot();
				}

			}

		});

		// SUA STATE
		jbtnSua.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				editCTState();
				// XAC NHAN BTN
				// jbtnXacNhan.addActionListener(new ActionListener() {
				// public void actionPerformed(ActionEvent e) {
				// if (formStatus.equals("editCT")) {

				// // UPDATE TO DTB khuyen_mai AND dot_khuyen_mai
				// int selectedRow = jtbDSCTKM.getSelectedRow();
				// String selected = listCT.get(selectedRow).getMakm();
				// KhuyenMai update = getCTForm();
				// KhuyenMaiBUS.updateCT(selected, update);
				// // UPDATE TO TABLE
				// listCT = KhuyenMaiBUS.getListKhuyenMai();
				// setTableCT(listCT);
				// int lastRowIndex = model1.getRowCount() - 1;
				// if (lastRowIndex >= 0) {
				// jtbDSCTKM.setRowSelectionInterval(lastRowIndex, lastRowIndex);
				// jtbDSCTKM.scrollRectToVisible(jtbDSCTKM.getCellRect(lastRowIndex, 0, true));
				// }

				// }
				// if (formStatus.equals("editDot")) {
				// // CHECK VALID DATE
				// Boolean flag = checkValidDate();
				// if (!flag) {
				// jbtnXacNhan.setEnabled(false);
				// clearFormDot();
				// }

				// else {
				// // UPDATE TO DTB dot_khuyen_mai AND chi_tiet_khuyen_mai
				// int selectedRow = jtbDSDKM.getSelectedRow();
				// int id = (Integer) jtbDSDKM.getModel().getValueAt(selectedRow, 0);
				// DotKhuyenMai update = getDotForm(id);
				// KhuyenMaiBUS.updateDot(update);
				// // UPDATE TO TABLE
				// setTableDot(jtfMaKhuyenMai.getText());
				// int lastRowIndex = model2.getRowCount() - 1;
				// if (lastRowIndex >= 0) {
				// jtbDSDKM.setRowSelectionInterval(lastRowIndex, lastRowIndex);
				// jtbDSDKM.scrollRectToVisible(jtbDSDKM.getCellRect(lastRowIndex, 0, true));
				// }
				// }
				// setTableCT(listCT);
				// clearFormDot();
				// }

				// }

				// });
			}
		});
		// XOA STATE
		jbtnXoa.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (jtbDSDKM.getSelectedRow() != -1) {
					int selectedRow = jtbDSDKM.getSelectedRow();
					int id = Integer.parseInt(jtbDSDKM.getModel().getValueAt(selectedRow, 0).toString());
					if (KhuyenMaiBUS.deleteDot(id)) {
						setTableDot(jtfMaKhuyenMai.getText());
						clearTable(jtbDSSPAD);
						numDot = KhuyenMaiBUS.countDot();
					}
					return;
				}
				int selectedRow = jtbDSCTKM.getSelectedRow();
				KhuyenMai selected = listCT.get(selectedRow);
				if (KhuyenMaiBUS.deleteCT(selected)) {
					listCT = KhuyenMaiBUS.getListKhuyenMai();
					setTableCT(listCT);
					clearTable(jtbDSDKM);
					clearFormCT();
					clearFormDot();
					defaultState();
				}
			}
		});

		// CLEAR BTN
		jbtnLamMoi.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (formStatus.equals("addCT"))
					clearFormCT();
				if (formStatus.equals("editCT")) {
					clearFormCT();
					editCTState();
				}

				if (formStatus.equals("addDot")) {
					clearFormDot();

				}

				if (formStatus.equals("editDot")) {
					clearFormDot();
				}
			}
		});
		// HUY BTN
		jbtnHuy.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				defaultState();
			}
		});

		// SEARCH STATE
		jbtnTimKiem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				formStatus = "search";
				if (jdateKetThucSearch.getDate().before(jdateBatDauSearch.getDate())) {
					JOptionPane.showMessageDialog(null, "Ngày bắt đầu phải trước ngày kết thúc!", "WARNING",
							JOptionPane.ERROR_MESSAGE);
					clearFormFilter();
					removeListener(jbtnTimKiem);
				} else {
					clearTable(jtbDSDKM);
					clearTable(jtbDSSPAD);
					ArrayList<String> filterForm = getFilterForm();
					resultSearch = KhuyenMaiBUS.searchFilterDot(filterForm);
					resultSearchSP = KhuyenMaiBUS.searchFilterSP(filterForm);
					// lấy danh sách CT cho bảng
					List<Object> listMaCT = resultSearch.get(0).stream().distinct().collect(Collectors.toList());
					ArrayList<KhuyenMai> listCTSearch = new ArrayList<>();
					for (int i = 0; i < listMaCT.size(); i++)
						for (int j = 0; j < listCT.size(); j++)
							if (listMaCT.get(i).toString().equalsIgnoreCase(listCT.get(j).getMakm()))
								listCTSearch.add(listCT.get(j));
					setTableCT(listCTSearch);
				}
			}
		});
		// CLEAR SEARCH FORM
		jbtnLamMoiSearch.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				formStatus = "default";
				clearFormFilter();
				setTableCT(listCT);
				clearTable(jtbDSDKM);
				clearTable(jtbDSSPAD);
			}
		});
	}
}
